// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_data.proto

#include "sensor_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protos {
PROTOBUF_CONSTEXPR SensorData_DataMapEntry_DoNotUse::SensorData_DataMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SensorData_DataMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorData_DataMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorData_DataMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SensorData_DataMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorData_DataMapEntry_DoNotUseDefaultTypeInternal _SensorData_DataMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SensorData::SensorData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.pacifier_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sensor_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sensor_group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sensor_payload_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDataDefaultTypeInternal() {}
  union {
    SensorData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDataDefaultTypeInternal _SensorData_default_instance_;
PROTOBUF_CONSTEXPR IMUData_Gyro::IMUData_Gyro(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gyro_x_)*/0
  , /*decltype(_impl_.gyro_y_)*/0
  , /*decltype(_impl_.gyro_z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMUData_GyroDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMUData_GyroDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMUData_GyroDefaultTypeInternal() {}
  union {
    IMUData_Gyro _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMUData_GyroDefaultTypeInternal _IMUData_Gyro_default_instance_;
PROTOBUF_CONSTEXPR IMUData_Mag::IMUData_Mag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mag_x_)*/0
  , /*decltype(_impl_.mag_y_)*/0
  , /*decltype(_impl_.mag_z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMUData_MagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMUData_MagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMUData_MagDefaultTypeInternal() {}
  union {
    IMUData_Mag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMUData_MagDefaultTypeInternal _IMUData_Mag_default_instance_;
PROTOBUF_CONSTEXPR IMUData_Acc::IMUData_Acc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.acc_x_)*/0
  , /*decltype(_impl_.acc_y_)*/0
  , /*decltype(_impl_.acc_z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMUData_AccDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMUData_AccDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMUData_AccDefaultTypeInternal() {}
  union {
    IMUData_Acc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMUData_AccDefaultTypeInternal _IMUData_Acc_default_instance_;
PROTOBUF_CONSTEXPR IMUData::IMUData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gyros_)*/{}
  , /*decltype(_impl_.mags_)*/{}
  , /*decltype(_impl_.accs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IMUDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IMUDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IMUDataDefaultTypeInternal() {}
  union {
    IMUData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IMUDataDefaultTypeInternal _IMUData_default_instance_;
PROTOBUF_CONSTEXPR PPGData_Led::PPGData_Led(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.led_1_)*/0
  , /*decltype(_impl_.led_2_)*/0
  , /*decltype(_impl_.led_3_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PPGData_LedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PPGData_LedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PPGData_LedDefaultTypeInternal() {}
  union {
    PPGData_Led _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PPGData_LedDefaultTypeInternal _PPGData_Led_default_instance_;
PROTOBUF_CONSTEXPR PPGData_Temperature::PPGData_Temperature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PPGData_TemperatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PPGData_TemperatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PPGData_TemperatureDefaultTypeInternal() {}
  union {
    PPGData_Temperature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PPGData_TemperatureDefaultTypeInternal _PPGData_Temperature_default_instance_;
PROTOBUF_CONSTEXPR PPGData::PPGData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leds_)*/{}
  , /*decltype(_impl_.temperatures_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PPGDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PPGDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PPGDataDefaultTypeInternal() {}
  union {
    PPGData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PPGDataDefaultTypeInternal _PPGData_default_instance_;
}  // namespace Protos
static ::_pb::Metadata file_level_metadata_sensor_5fdata_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sensor_5fdata_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sensor_5fdata_2eproto = nullptr;

const uint32_t TableStruct_sensor_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Protos::SensorData_DataMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Protos::SensorData_DataMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protos::SensorData_DataMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Protos::SensorData_DataMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protos::SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protos::SensorData, _impl_.pacifier_id_),
  PROTOBUF_FIELD_OFFSET(::Protos::SensorData, _impl_.sensor_type_),
  PROTOBUF_FIELD_OFFSET(::Protos::SensorData, _impl_.sensor_group_),
  PROTOBUF_FIELD_OFFSET(::Protos::SensorData, _impl_.sensor_payload_type_),
  PROTOBUF_FIELD_OFFSET(::Protos::SensorData, _impl_.data_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Gyro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Gyro, _impl_.gyro_x_),
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Gyro, _impl_.gyro_y_),
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Gyro, _impl_.gyro_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Mag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Mag, _impl_.mag_x_),
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Mag, _impl_.mag_y_),
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Mag, _impl_.mag_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Acc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Acc, _impl_.acc_x_),
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Acc, _impl_.acc_y_),
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData_Acc, _impl_.acc_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData, _impl_.gyros_),
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData, _impl_.mags_),
  PROTOBUF_FIELD_OFFSET(::Protos::IMUData, _impl_.accs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protos::PPGData_Led, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protos::PPGData_Led, _impl_.led_1_),
  PROTOBUF_FIELD_OFFSET(::Protos::PPGData_Led, _impl_.led_2_),
  PROTOBUF_FIELD_OFFSET(::Protos::PPGData_Led, _impl_.led_3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protos::PPGData_Temperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protos::PPGData_Temperature, _impl_.temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protos::PPGData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protos::PPGData, _impl_.leds_),
  PROTOBUF_FIELD_OFFSET(::Protos::PPGData, _impl_.temperatures_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::Protos::SensorData_DataMapEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::Protos::SensorData)},
  { 21, -1, -1, sizeof(::Protos::IMUData_Gyro)},
  { 30, -1, -1, sizeof(::Protos::IMUData_Mag)},
  { 39, -1, -1, sizeof(::Protos::IMUData_Acc)},
  { 48, -1, -1, sizeof(::Protos::IMUData)},
  { 57, -1, -1, sizeof(::Protos::PPGData_Led)},
  { 66, -1, -1, sizeof(::Protos::PPGData_Temperature)},
  { 73, -1, -1, sizeof(::Protos::PPGData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protos::_SensorData_DataMapEntry_DoNotUse_default_instance_._instance,
  &::Protos::_SensorData_default_instance_._instance,
  &::Protos::_IMUData_Gyro_default_instance_._instance,
  &::Protos::_IMUData_Mag_default_instance_._instance,
  &::Protos::_IMUData_Acc_default_instance_._instance,
  &::Protos::_IMUData_default_instance_._instance,
  &::Protos::_PPGData_Led_default_instance_._instance,
  &::Protos::_PPGData_Temperature_default_instance_._instance,
  &::Protos::_PPGData_default_instance_._instance,
};

const char descriptor_table_protodef_sensor_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021sensor_data.proto\022\006Protos\"\314\001\n\nSensorDa"
  "ta\022\023\n\013pacifier_id\030\001 \001(\t\022\023\n\013sensor_type\030\002"
  " \001(\t\022\024\n\014sensor_group\030\003 \001(\t\022\033\n\023sensor_pay"
  "load_type\030\004 \001(\t\0221\n\010data_map\030\005 \003(\0132\037.Prot"
  "os.SensorData.DataMapEntry\032.\n\014DataMapEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\224\002\n\007I"
  "MUData\022#\n\005gyros\030\001 \003(\0132\024.Protos.IMUData.G"
  "yro\022!\n\004mags\030\002 \003(\0132\023.Protos.IMUData.Mag\022!"
  "\n\004accs\030\003 \003(\0132\023.Protos.IMUData.Acc\0326\n\004Gyr"
  "o\022\016\n\006gyro_x\030\001 \001(\002\022\016\n\006gyro_y\030\002 \001(\002\022\016\n\006gyr"
  "o_z\030\003 \001(\002\0322\n\003Mag\022\r\n\005mag_x\030\001 \001(\002\022\r\n\005mag_y"
  "\030\002 \001(\002\022\r\n\005mag_z\030\003 \001(\002\0322\n\003Acc\022\r\n\005acc_x\030\001 "
  "\001(\002\022\r\n\005acc_y\030\002 \001(\002\022\r\n\005acc_z\030\003 \001(\002\"\267\001\n\007PP"
  "GData\022!\n\004leds\030\001 \003(\0132\023.Protos.PPGData.Led"
  "\0221\n\014temperatures\030\002 \003(\0132\033.Protos.PPGData."
  "Temperature\0322\n\003Led\022\r\n\005led_1\030\001 \001(\005\022\r\n\005led"
  "_2\030\002 \001(\005\022\r\n\005led_3\030\003 \001(\005\032\"\n\013Temperature\022\023"
  "\n\013temperature\030\001 \001(\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_sensor_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensor_5fdata_2eproto = {
    false, false, 707, descriptor_table_protodef_sensor_5fdata_2eproto,
    "sensor_data.proto",
    &descriptor_table_sensor_5fdata_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_sensor_5fdata_2eproto::offsets,
    file_level_metadata_sensor_5fdata_2eproto, file_level_enum_descriptors_sensor_5fdata_2eproto,
    file_level_service_descriptors_sensor_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensor_5fdata_2eproto_getter() {
  return &descriptor_table_sensor_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensor_5fdata_2eproto(&descriptor_table_sensor_5fdata_2eproto);
namespace Protos {

// ===================================================================

SensorData_DataMapEntry_DoNotUse::SensorData_DataMapEntry_DoNotUse() {}
SensorData_DataMapEntry_DoNotUse::SensorData_DataMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SensorData_DataMapEntry_DoNotUse::MergeFrom(const SensorData_DataMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SensorData_DataMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[0]);
}

// ===================================================================

class SensorData::_Internal {
 public:
};

SensorData::SensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SensorData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Protos.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_map_)*/{}
    , decltype(_impl_.pacifier_id_){}
    , decltype(_impl_.sensor_type_){}
    , decltype(_impl_.sensor_group_){}
    , decltype(_impl_.sensor_payload_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_map_.MergeFrom(from._impl_.data_map_);
  _impl_.pacifier_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pacifier_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pacifier_id().empty()) {
    _this->_impl_.pacifier_id_.Set(from._internal_pacifier_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sensor_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sensor_type().empty()) {
    _this->_impl_.sensor_type_.Set(from._internal_sensor_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sensor_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sensor_group().empty()) {
    _this->_impl_.sensor_group_.Set(from._internal_sensor_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sensor_payload_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_payload_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sensor_payload_type().empty()) {
    _this->_impl_.sensor_payload_type_.Set(from._internal_sensor_payload_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protos.SensorData)
}

inline void SensorData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_map_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.pacifier_id_){}
    , decltype(_impl_.sensor_type_){}
    , decltype(_impl_.sensor_group_){}
    , decltype(_impl_.sensor_payload_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pacifier_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pacifier_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sensor_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sensor_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sensor_payload_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_payload_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:Protos.SensorData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SensorData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_map_.Destruct();
  _impl_.data_map_.~MapField();
  _impl_.pacifier_id_.Destroy();
  _impl_.sensor_type_.Destroy();
  _impl_.sensor_group_.Destroy();
  _impl_.sensor_payload_type_.Destroy();
}

void SensorData::ArenaDtor(void* object) {
  SensorData* _this = reinterpret_cast< SensorData* >(object);
  _this->_impl_.data_map_.Destruct();
}
void SensorData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:Protos.SensorData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_map_.Clear();
  _impl_.pacifier_id_.ClearToEmpty();
  _impl_.sensor_type_.ClearToEmpty();
  _impl_.sensor_group_.ClearToEmpty();
  _impl_.sensor_payload_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pacifier_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pacifier_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protos.SensorData.pacifier_id"));
        } else
          goto handle_unusual;
        continue;
      // string sensor_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sensor_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protos.SensorData.sensor_type"));
        } else
          goto handle_unusual;
        continue;
      // string sensor_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sensor_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protos.SensorData.sensor_group"));
        } else
          goto handle_unusual;
        continue;
      // string sensor_payload_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sensor_payload_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protos.SensorData.sensor_payload_type"));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> data_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.data_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protos.SensorData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pacifier_id = 1;
  if (!this->_internal_pacifier_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pacifier_id().data(), static_cast<int>(this->_internal_pacifier_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protos.SensorData.pacifier_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pacifier_id(), target);
  }

  // string sensor_type = 2;
  if (!this->_internal_sensor_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor_type().data(), static_cast<int>(this->_internal_sensor_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protos.SensorData.sensor_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sensor_type(), target);
  }

  // string sensor_group = 3;
  if (!this->_internal_sensor_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor_group().data(), static_cast<int>(this->_internal_sensor_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protos.SensorData.sensor_group");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sensor_group(), target);
  }

  // string sensor_payload_type = 4;
  if (!this->_internal_sensor_payload_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor_payload_type().data(), static_cast<int>(this->_internal_sensor_payload_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protos.SensorData.sensor_payload_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sensor_payload_type(), target);
  }

  // map<string, bytes> data_map = 5;
  if (!this->_internal_data_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SensorData_DataMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_data_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Protos.SensorData.DataMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protos.SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protos.SensorData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> data_map = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data_map().begin();
      it != this->_internal_data_map().end(); ++it) {
    total_size += SensorData_DataMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string pacifier_id = 1;
  if (!this->_internal_pacifier_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pacifier_id());
  }

  // string sensor_type = 2;
  if (!this->_internal_sensor_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_type());
  }

  // string sensor_group = 3;
  if (!this->_internal_sensor_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_group());
  }

  // string sensor_payload_type = 4;
  if (!this->_internal_sensor_payload_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_payload_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorData::GetClassData() const { return &_class_data_; }


void SensorData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorData*>(&to_msg);
  auto& from = static_cast<const SensorData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protos.SensorData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_map_.MergeFrom(from._impl_.data_map_);
  if (!from._internal_pacifier_id().empty()) {
    _this->_internal_set_pacifier_id(from._internal_pacifier_id());
  }
  if (!from._internal_sensor_type().empty()) {
    _this->_internal_set_sensor_type(from._internal_sensor_type());
  }
  if (!from._internal_sensor_group().empty()) {
    _this->_internal_set_sensor_group(from._internal_sensor_group());
  }
  if (!from._internal_sensor_payload_type().empty()) {
    _this->_internal_set_sensor_payload_type(from._internal_sensor_payload_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protos.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  return true;
}

void SensorData::InternalSwap(SensorData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_map_.InternalSwap(&other->_impl_.data_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pacifier_id_, lhs_arena,
      &other->_impl_.pacifier_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_type_, lhs_arena,
      &other->_impl_.sensor_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_group_, lhs_arena,
      &other->_impl_.sensor_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_payload_type_, lhs_arena,
      &other->_impl_.sensor_payload_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[1]);
}

// ===================================================================

class IMUData_Gyro::_Internal {
 public:
};

IMUData_Gyro::IMUData_Gyro(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protos.IMUData.Gyro)
}
IMUData_Gyro::IMUData_Gyro(const IMUData_Gyro& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IMUData_Gyro* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gyro_x_){}
    , decltype(_impl_.gyro_y_){}
    , decltype(_impl_.gyro_z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gyro_x_, &from._impl_.gyro_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gyro_z_) -
    reinterpret_cast<char*>(&_impl_.gyro_x_)) + sizeof(_impl_.gyro_z_));
  // @@protoc_insertion_point(copy_constructor:Protos.IMUData.Gyro)
}

inline void IMUData_Gyro::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gyro_x_){0}
    , decltype(_impl_.gyro_y_){0}
    , decltype(_impl_.gyro_z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMUData_Gyro::~IMUData_Gyro() {
  // @@protoc_insertion_point(destructor:Protos.IMUData.Gyro)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMUData_Gyro::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMUData_Gyro::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMUData_Gyro::Clear() {
// @@protoc_insertion_point(message_clear_start:Protos.IMUData.Gyro)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gyro_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gyro_z_) -
      reinterpret_cast<char*>(&_impl_.gyro_x_)) + sizeof(_impl_.gyro_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUData_Gyro::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float gyro_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.gyro_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float gyro_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.gyro_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float gyro_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.gyro_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUData_Gyro::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protos.IMUData.Gyro)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float gyro_x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_x = this->_internal_gyro_x();
  uint32_t raw_gyro_x;
  memcpy(&raw_gyro_x, &tmp_gyro_x, sizeof(tmp_gyro_x));
  if (raw_gyro_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_gyro_x(), target);
  }

  // float gyro_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_y = this->_internal_gyro_y();
  uint32_t raw_gyro_y;
  memcpy(&raw_gyro_y, &tmp_gyro_y, sizeof(tmp_gyro_y));
  if (raw_gyro_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_gyro_y(), target);
  }

  // float gyro_z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_z = this->_internal_gyro_z();
  uint32_t raw_gyro_z;
  memcpy(&raw_gyro_z, &tmp_gyro_z, sizeof(tmp_gyro_z));
  if (raw_gyro_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_gyro_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protos.IMUData.Gyro)
  return target;
}

size_t IMUData_Gyro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protos.IMUData.Gyro)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float gyro_x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_x = this->_internal_gyro_x();
  uint32_t raw_gyro_x;
  memcpy(&raw_gyro_x, &tmp_gyro_x, sizeof(tmp_gyro_x));
  if (raw_gyro_x != 0) {
    total_size += 1 + 4;
  }

  // float gyro_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_y = this->_internal_gyro_y();
  uint32_t raw_gyro_y;
  memcpy(&raw_gyro_y, &tmp_gyro_y, sizeof(tmp_gyro_y));
  if (raw_gyro_y != 0) {
    total_size += 1 + 4;
  }

  // float gyro_z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_z = this->_internal_gyro_z();
  uint32_t raw_gyro_z;
  memcpy(&raw_gyro_z, &tmp_gyro_z, sizeof(tmp_gyro_z));
  if (raw_gyro_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMUData_Gyro::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IMUData_Gyro::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMUData_Gyro::GetClassData() const { return &_class_data_; }


void IMUData_Gyro::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IMUData_Gyro*>(&to_msg);
  auto& from = static_cast<const IMUData_Gyro&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protos.IMUData.Gyro)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_x = from._internal_gyro_x();
  uint32_t raw_gyro_x;
  memcpy(&raw_gyro_x, &tmp_gyro_x, sizeof(tmp_gyro_x));
  if (raw_gyro_x != 0) {
    _this->_internal_set_gyro_x(from._internal_gyro_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_y = from._internal_gyro_y();
  uint32_t raw_gyro_y;
  memcpy(&raw_gyro_y, &tmp_gyro_y, sizeof(tmp_gyro_y));
  if (raw_gyro_y != 0) {
    _this->_internal_set_gyro_y(from._internal_gyro_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gyro_z = from._internal_gyro_z();
  uint32_t raw_gyro_z;
  memcpy(&raw_gyro_z, &tmp_gyro_z, sizeof(tmp_gyro_z));
  if (raw_gyro_z != 0) {
    _this->_internal_set_gyro_z(from._internal_gyro_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMUData_Gyro::CopyFrom(const IMUData_Gyro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protos.IMUData.Gyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUData_Gyro::IsInitialized() const {
  return true;
}

void IMUData_Gyro::InternalSwap(IMUData_Gyro* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUData_Gyro, _impl_.gyro_z_)
      + sizeof(IMUData_Gyro::_impl_.gyro_z_)
      - PROTOBUF_FIELD_OFFSET(IMUData_Gyro, _impl_.gyro_x_)>(
          reinterpret_cast<char*>(&_impl_.gyro_x_),
          reinterpret_cast<char*>(&other->_impl_.gyro_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUData_Gyro::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[2]);
}

// ===================================================================

class IMUData_Mag::_Internal {
 public:
};

IMUData_Mag::IMUData_Mag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protos.IMUData.Mag)
}
IMUData_Mag::IMUData_Mag(const IMUData_Mag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IMUData_Mag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mag_x_){}
    , decltype(_impl_.mag_y_){}
    , decltype(_impl_.mag_z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mag_x_, &from._impl_.mag_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mag_z_) -
    reinterpret_cast<char*>(&_impl_.mag_x_)) + sizeof(_impl_.mag_z_));
  // @@protoc_insertion_point(copy_constructor:Protos.IMUData.Mag)
}

inline void IMUData_Mag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mag_x_){0}
    , decltype(_impl_.mag_y_){0}
    , decltype(_impl_.mag_z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMUData_Mag::~IMUData_Mag() {
  // @@protoc_insertion_point(destructor:Protos.IMUData.Mag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMUData_Mag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMUData_Mag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMUData_Mag::Clear() {
// @@protoc_insertion_point(message_clear_start:Protos.IMUData.Mag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mag_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mag_z_) -
      reinterpret_cast<char*>(&_impl_.mag_x_)) + sizeof(_impl_.mag_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUData_Mag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float mag_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.mag_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.mag_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mag_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.mag_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUData_Mag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protos.IMUData.Mag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float mag_x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_x = this->_internal_mag_x();
  uint32_t raw_mag_x;
  memcpy(&raw_mag_x, &tmp_mag_x, sizeof(tmp_mag_x));
  if (raw_mag_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_mag_x(), target);
  }

  // float mag_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_y = this->_internal_mag_y();
  uint32_t raw_mag_y;
  memcpy(&raw_mag_y, &tmp_mag_y, sizeof(tmp_mag_y));
  if (raw_mag_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_mag_y(), target);
  }

  // float mag_z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_z = this->_internal_mag_z();
  uint32_t raw_mag_z;
  memcpy(&raw_mag_z, &tmp_mag_z, sizeof(tmp_mag_z));
  if (raw_mag_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_mag_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protos.IMUData.Mag)
  return target;
}

size_t IMUData_Mag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protos.IMUData.Mag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float mag_x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_x = this->_internal_mag_x();
  uint32_t raw_mag_x;
  memcpy(&raw_mag_x, &tmp_mag_x, sizeof(tmp_mag_x));
  if (raw_mag_x != 0) {
    total_size += 1 + 4;
  }

  // float mag_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_y = this->_internal_mag_y();
  uint32_t raw_mag_y;
  memcpy(&raw_mag_y, &tmp_mag_y, sizeof(tmp_mag_y));
  if (raw_mag_y != 0) {
    total_size += 1 + 4;
  }

  // float mag_z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_z = this->_internal_mag_z();
  uint32_t raw_mag_z;
  memcpy(&raw_mag_z, &tmp_mag_z, sizeof(tmp_mag_z));
  if (raw_mag_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMUData_Mag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IMUData_Mag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMUData_Mag::GetClassData() const { return &_class_data_; }


void IMUData_Mag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IMUData_Mag*>(&to_msg);
  auto& from = static_cast<const IMUData_Mag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protos.IMUData.Mag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_x = from._internal_mag_x();
  uint32_t raw_mag_x;
  memcpy(&raw_mag_x, &tmp_mag_x, sizeof(tmp_mag_x));
  if (raw_mag_x != 0) {
    _this->_internal_set_mag_x(from._internal_mag_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_y = from._internal_mag_y();
  uint32_t raw_mag_y;
  memcpy(&raw_mag_y, &tmp_mag_y, sizeof(tmp_mag_y));
  if (raw_mag_y != 0) {
    _this->_internal_set_mag_y(from._internal_mag_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mag_z = from._internal_mag_z();
  uint32_t raw_mag_z;
  memcpy(&raw_mag_z, &tmp_mag_z, sizeof(tmp_mag_z));
  if (raw_mag_z != 0) {
    _this->_internal_set_mag_z(from._internal_mag_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMUData_Mag::CopyFrom(const IMUData_Mag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protos.IMUData.Mag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUData_Mag::IsInitialized() const {
  return true;
}

void IMUData_Mag::InternalSwap(IMUData_Mag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUData_Mag, _impl_.mag_z_)
      + sizeof(IMUData_Mag::_impl_.mag_z_)
      - PROTOBUF_FIELD_OFFSET(IMUData_Mag, _impl_.mag_x_)>(
          reinterpret_cast<char*>(&_impl_.mag_x_),
          reinterpret_cast<char*>(&other->_impl_.mag_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUData_Mag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[3]);
}

// ===================================================================

class IMUData_Acc::_Internal {
 public:
};

IMUData_Acc::IMUData_Acc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protos.IMUData.Acc)
}
IMUData_Acc::IMUData_Acc(const IMUData_Acc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IMUData_Acc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.acc_x_){}
    , decltype(_impl_.acc_y_){}
    , decltype(_impl_.acc_z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.acc_x_, &from._impl_.acc_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.acc_z_) -
    reinterpret_cast<char*>(&_impl_.acc_x_)) + sizeof(_impl_.acc_z_));
  // @@protoc_insertion_point(copy_constructor:Protos.IMUData.Acc)
}

inline void IMUData_Acc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.acc_x_){0}
    , decltype(_impl_.acc_y_){0}
    , decltype(_impl_.acc_z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMUData_Acc::~IMUData_Acc() {
  // @@protoc_insertion_point(destructor:Protos.IMUData.Acc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMUData_Acc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMUData_Acc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMUData_Acc::Clear() {
// @@protoc_insertion_point(message_clear_start:Protos.IMUData.Acc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.acc_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.acc_z_) -
      reinterpret_cast<char*>(&_impl_.acc_x_)) + sizeof(_impl_.acc_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUData_Acc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float acc_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.acc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float acc_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.acc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float acc_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.acc_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUData_Acc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protos.IMUData.Acc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float acc_x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_x = this->_internal_acc_x();
  uint32_t raw_acc_x;
  memcpy(&raw_acc_x, &tmp_acc_x, sizeof(tmp_acc_x));
  if (raw_acc_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_acc_x(), target);
  }

  // float acc_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_y = this->_internal_acc_y();
  uint32_t raw_acc_y;
  memcpy(&raw_acc_y, &tmp_acc_y, sizeof(tmp_acc_y));
  if (raw_acc_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_acc_y(), target);
  }

  // float acc_z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_z = this->_internal_acc_z();
  uint32_t raw_acc_z;
  memcpy(&raw_acc_z, &tmp_acc_z, sizeof(tmp_acc_z));
  if (raw_acc_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_acc_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protos.IMUData.Acc)
  return target;
}

size_t IMUData_Acc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protos.IMUData.Acc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float acc_x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_x = this->_internal_acc_x();
  uint32_t raw_acc_x;
  memcpy(&raw_acc_x, &tmp_acc_x, sizeof(tmp_acc_x));
  if (raw_acc_x != 0) {
    total_size += 1 + 4;
  }

  // float acc_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_y = this->_internal_acc_y();
  uint32_t raw_acc_y;
  memcpy(&raw_acc_y, &tmp_acc_y, sizeof(tmp_acc_y));
  if (raw_acc_y != 0) {
    total_size += 1 + 4;
  }

  // float acc_z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_z = this->_internal_acc_z();
  uint32_t raw_acc_z;
  memcpy(&raw_acc_z, &tmp_acc_z, sizeof(tmp_acc_z));
  if (raw_acc_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMUData_Acc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IMUData_Acc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMUData_Acc::GetClassData() const { return &_class_data_; }


void IMUData_Acc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IMUData_Acc*>(&to_msg);
  auto& from = static_cast<const IMUData_Acc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protos.IMUData.Acc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_x = from._internal_acc_x();
  uint32_t raw_acc_x;
  memcpy(&raw_acc_x, &tmp_acc_x, sizeof(tmp_acc_x));
  if (raw_acc_x != 0) {
    _this->_internal_set_acc_x(from._internal_acc_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_y = from._internal_acc_y();
  uint32_t raw_acc_y;
  memcpy(&raw_acc_y, &tmp_acc_y, sizeof(tmp_acc_y));
  if (raw_acc_y != 0) {
    _this->_internal_set_acc_y(from._internal_acc_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_z = from._internal_acc_z();
  uint32_t raw_acc_z;
  memcpy(&raw_acc_z, &tmp_acc_z, sizeof(tmp_acc_z));
  if (raw_acc_z != 0) {
    _this->_internal_set_acc_z(from._internal_acc_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMUData_Acc::CopyFrom(const IMUData_Acc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protos.IMUData.Acc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUData_Acc::IsInitialized() const {
  return true;
}

void IMUData_Acc::InternalSwap(IMUData_Acc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUData_Acc, _impl_.acc_z_)
      + sizeof(IMUData_Acc::_impl_.acc_z_)
      - PROTOBUF_FIELD_OFFSET(IMUData_Acc, _impl_.acc_x_)>(
          reinterpret_cast<char*>(&_impl_.acc_x_),
          reinterpret_cast<char*>(&other->_impl_.acc_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUData_Acc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[4]);
}

// ===================================================================

class IMUData::_Internal {
 public:
};

IMUData::IMUData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protos.IMUData)
}
IMUData::IMUData(const IMUData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IMUData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gyros_){from._impl_.gyros_}
    , decltype(_impl_.mags_){from._impl_.mags_}
    , decltype(_impl_.accs_){from._impl_.accs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protos.IMUData)
}

inline void IMUData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gyros_){arena}
    , decltype(_impl_.mags_){arena}
    , decltype(_impl_.accs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IMUData::~IMUData() {
  // @@protoc_insertion_point(destructor:Protos.IMUData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IMUData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gyros_.~RepeatedPtrField();
  _impl_.mags_.~RepeatedPtrField();
  _impl_.accs_.~RepeatedPtrField();
}

void IMUData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IMUData::Clear() {
// @@protoc_insertion_point(message_clear_start:Protos.IMUData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gyros_.Clear();
  _impl_.mags_.Clear();
  _impl_.accs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protos.IMUData.Gyro gyros = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gyros(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protos.IMUData.Mag mags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protos.IMUData.Acc accs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protos.IMUData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protos.IMUData.Gyro gyros = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gyros_size()); i < n; i++) {
    const auto& repfield = this->_internal_gyros(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Protos.IMUData.Mag mags = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mags_size()); i < n; i++) {
    const auto& repfield = this->_internal_mags(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Protos.IMUData.Acc accs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accs_size()); i < n; i++) {
    const auto& repfield = this->_internal_accs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protos.IMUData)
  return target;
}

size_t IMUData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protos.IMUData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protos.IMUData.Gyro gyros = 1;
  total_size += 1UL * this->_internal_gyros_size();
  for (const auto& msg : this->_impl_.gyros_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protos.IMUData.Mag mags = 2;
  total_size += 1UL * this->_internal_mags_size();
  for (const auto& msg : this->_impl_.mags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protos.IMUData.Acc accs = 3;
  total_size += 1UL * this->_internal_accs_size();
  for (const auto& msg : this->_impl_.accs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMUData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IMUData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMUData::GetClassData() const { return &_class_data_; }


void IMUData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IMUData*>(&to_msg);
  auto& from = static_cast<const IMUData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protos.IMUData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gyros_.MergeFrom(from._impl_.gyros_);
  _this->_impl_.mags_.MergeFrom(from._impl_.mags_);
  _this->_impl_.accs_.MergeFrom(from._impl_.accs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMUData::CopyFrom(const IMUData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protos.IMUData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUData::IsInitialized() const {
  return true;
}

void IMUData::InternalSwap(IMUData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gyros_.InternalSwap(&other->_impl_.gyros_);
  _impl_.mags_.InternalSwap(&other->_impl_.mags_);
  _impl_.accs_.InternalSwap(&other->_impl_.accs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[5]);
}

// ===================================================================

class PPGData_Led::_Internal {
 public:
};

PPGData_Led::PPGData_Led(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protos.PPGData.Led)
}
PPGData_Led::PPGData_Led(const PPGData_Led& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PPGData_Led* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.led_1_){}
    , decltype(_impl_.led_2_){}
    , decltype(_impl_.led_3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.led_1_, &from._impl_.led_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.led_3_) -
    reinterpret_cast<char*>(&_impl_.led_1_)) + sizeof(_impl_.led_3_));
  // @@protoc_insertion_point(copy_constructor:Protos.PPGData.Led)
}

inline void PPGData_Led::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.led_1_){0}
    , decltype(_impl_.led_2_){0}
    , decltype(_impl_.led_3_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PPGData_Led::~PPGData_Led() {
  // @@protoc_insertion_point(destructor:Protos.PPGData.Led)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PPGData_Led::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PPGData_Led::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PPGData_Led::Clear() {
// @@protoc_insertion_point(message_clear_start:Protos.PPGData.Led)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.led_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.led_3_) -
      reinterpret_cast<char*>(&_impl_.led_1_)) + sizeof(_impl_.led_3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PPGData_Led::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 led_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.led_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 led_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.led_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 led_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.led_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PPGData_Led::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protos.PPGData.Led)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 led_1 = 1;
  if (this->_internal_led_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_led_1(), target);
  }

  // int32 led_2 = 2;
  if (this->_internal_led_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_led_2(), target);
  }

  // int32 led_3 = 3;
  if (this->_internal_led_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_led_3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protos.PPGData.Led)
  return target;
}

size_t PPGData_Led::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protos.PPGData.Led)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 led_1 = 1;
  if (this->_internal_led_1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_led_1());
  }

  // int32 led_2 = 2;
  if (this->_internal_led_2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_led_2());
  }

  // int32 led_3 = 3;
  if (this->_internal_led_3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_led_3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PPGData_Led::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PPGData_Led::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PPGData_Led::GetClassData() const { return &_class_data_; }


void PPGData_Led::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PPGData_Led*>(&to_msg);
  auto& from = static_cast<const PPGData_Led&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protos.PPGData.Led)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_led_1() != 0) {
    _this->_internal_set_led_1(from._internal_led_1());
  }
  if (from._internal_led_2() != 0) {
    _this->_internal_set_led_2(from._internal_led_2());
  }
  if (from._internal_led_3() != 0) {
    _this->_internal_set_led_3(from._internal_led_3());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PPGData_Led::CopyFrom(const PPGData_Led& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protos.PPGData.Led)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPGData_Led::IsInitialized() const {
  return true;
}

void PPGData_Led::InternalSwap(PPGData_Led* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PPGData_Led, _impl_.led_3_)
      + sizeof(PPGData_Led::_impl_.led_3_)
      - PROTOBUF_FIELD_OFFSET(PPGData_Led, _impl_.led_1_)>(
          reinterpret_cast<char*>(&_impl_.led_1_),
          reinterpret_cast<char*>(&other->_impl_.led_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PPGData_Led::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[6]);
}

// ===================================================================

class PPGData_Temperature::_Internal {
 public:
};

PPGData_Temperature::PPGData_Temperature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protos.PPGData.Temperature)
}
PPGData_Temperature::PPGData_Temperature(const PPGData_Temperature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PPGData_Temperature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.temperature_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.temperature_ = from._impl_.temperature_;
  // @@protoc_insertion_point(copy_constructor:Protos.PPGData.Temperature)
}

inline void PPGData_Temperature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.temperature_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PPGData_Temperature::~PPGData_Temperature() {
  // @@protoc_insertion_point(destructor:Protos.PPGData.Temperature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PPGData_Temperature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PPGData_Temperature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PPGData_Temperature::Clear() {
// @@protoc_insertion_point(message_clear_start:Protos.PPGData.Temperature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.temperature_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PPGData_Temperature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PPGData_Temperature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protos.PPGData.Temperature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float temperature = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protos.PPGData.Temperature)
  return target;
}

size_t PPGData_Temperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protos.PPGData.Temperature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float temperature = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PPGData_Temperature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PPGData_Temperature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PPGData_Temperature::GetClassData() const { return &_class_data_; }


void PPGData_Temperature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PPGData_Temperature*>(&to_msg);
  auto& from = static_cast<const PPGData_Temperature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protos.PPGData.Temperature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = from._internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PPGData_Temperature::CopyFrom(const PPGData_Temperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protos.PPGData.Temperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPGData_Temperature::IsInitialized() const {
  return true;
}

void PPGData_Temperature::InternalSwap(PPGData_Temperature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.temperature_, other->_impl_.temperature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PPGData_Temperature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[7]);
}

// ===================================================================

class PPGData::_Internal {
 public:
};

PPGData::PPGData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protos.PPGData)
}
PPGData::PPGData(const PPGData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PPGData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leds_){from._impl_.leds_}
    , decltype(_impl_.temperatures_){from._impl_.temperatures_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protos.PPGData)
}

inline void PPGData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leds_){arena}
    , decltype(_impl_.temperatures_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PPGData::~PPGData() {
  // @@protoc_insertion_point(destructor:Protos.PPGData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PPGData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.leds_.~RepeatedPtrField();
  _impl_.temperatures_.~RepeatedPtrField();
}

void PPGData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PPGData::Clear() {
// @@protoc_insertion_point(message_clear_start:Protos.PPGData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leds_.Clear();
  _impl_.temperatures_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PPGData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protos.PPGData.Led leds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protos.PPGData.Temperature temperatures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_temperatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PPGData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protos.PPGData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protos.PPGData.Led leds = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_leds_size()); i < n; i++) {
    const auto& repfield = this->_internal_leds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Protos.PPGData.Temperature temperatures = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_temperatures_size()); i < n; i++) {
    const auto& repfield = this->_internal_temperatures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protos.PPGData)
  return target;
}

size_t PPGData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protos.PPGData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protos.PPGData.Led leds = 1;
  total_size += 1UL * this->_internal_leds_size();
  for (const auto& msg : this->_impl_.leds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protos.PPGData.Temperature temperatures = 2;
  total_size += 1UL * this->_internal_temperatures_size();
  for (const auto& msg : this->_impl_.temperatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PPGData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PPGData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PPGData::GetClassData() const { return &_class_data_; }


void PPGData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PPGData*>(&to_msg);
  auto& from = static_cast<const PPGData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protos.PPGData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.leds_.MergeFrom(from._impl_.leds_);
  _this->_impl_.temperatures_.MergeFrom(from._impl_.temperatures_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PPGData::CopyFrom(const PPGData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protos.PPGData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPGData::IsInitialized() const {
  return true;
}

void PPGData::InternalSwap(PPGData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.leds_.InternalSwap(&other->_impl_.leds_);
  _impl_.temperatures_.InternalSwap(&other->_impl_.temperatures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PPGData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protos::SensorData_DataMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Protos::SensorData_DataMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protos::SensorData_DataMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Protos::SensorData*
Arena::CreateMaybeMessage< ::Protos::SensorData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protos::SensorData >(arena);
}
template<> PROTOBUF_NOINLINE ::Protos::IMUData_Gyro*
Arena::CreateMaybeMessage< ::Protos::IMUData_Gyro >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protos::IMUData_Gyro >(arena);
}
template<> PROTOBUF_NOINLINE ::Protos::IMUData_Mag*
Arena::CreateMaybeMessage< ::Protos::IMUData_Mag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protos::IMUData_Mag >(arena);
}
template<> PROTOBUF_NOINLINE ::Protos::IMUData_Acc*
Arena::CreateMaybeMessage< ::Protos::IMUData_Acc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protos::IMUData_Acc >(arena);
}
template<> PROTOBUF_NOINLINE ::Protos::IMUData*
Arena::CreateMaybeMessage< ::Protos::IMUData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protos::IMUData >(arena);
}
template<> PROTOBUF_NOINLINE ::Protos::PPGData_Led*
Arena::CreateMaybeMessage< ::Protos::PPGData_Led >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protos::PPGData_Led >(arena);
}
template<> PROTOBUF_NOINLINE ::Protos::PPGData_Temperature*
Arena::CreateMaybeMessage< ::Protos::PPGData_Temperature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protos::PPGData_Temperature >(arena);
}
template<> PROTOBUF_NOINLINE ::Protos::PPGData*
Arena::CreateMaybeMessage< ::Protos::PPGData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protos::PPGData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
