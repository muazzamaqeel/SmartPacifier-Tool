// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: myservice.proto

#include "myservice.pb.h"
#include "myservice.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace myservice {

static const char* MyService_method_names[] = {
  "/myservice.MyService/StreamMessages",
};

std::unique_ptr< MyService::Stub> MyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MyService::Stub> stub(new MyService::Stub(channel, options));
  return stub;
}

MyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StreamMessages_(MyService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::google::protobuf::StringValue>* MyService::Stub::StreamMessagesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::protobuf::StringValue>::Create(channel_.get(), rpcmethod_StreamMessages_, context, request);
}

void MyService::Stub::async::StreamMessages(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::google::protobuf::StringValue>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::google::protobuf::StringValue>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamMessages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::google::protobuf::StringValue>* MyService::Stub::AsyncStreamMessagesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::protobuf::StringValue>::Create(channel_.get(), cq, rpcmethod_StreamMessages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::protobuf::StringValue>* MyService::Stub::PrepareAsyncStreamMessagesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::protobuf::StringValue>::Create(channel_.get(), cq, rpcmethod_StreamMessages_, context, request, false, nullptr);
}

MyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MyService::Service, ::google::protobuf::Empty, ::google::protobuf::StringValue>(
          [](MyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::google::protobuf::StringValue>* writer) {
               return service->StreamMessages(ctx, req, writer);
             }, this)));
}

MyService::Service::~Service() {
}

::grpc::Status MyService::Service::StreamMessages(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::google::protobuf::StringValue>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace myservice

