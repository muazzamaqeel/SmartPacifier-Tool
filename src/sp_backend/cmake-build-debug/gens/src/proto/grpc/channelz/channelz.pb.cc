// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/grpc/channelz/channelz.proto

#include "src/proto/grpc/channelz/channelz.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpc {
namespace channelz {
namespace v1 {
PROTOBUF_CONSTEXPR Channel::Channel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_ref_)*/{}
  , /*decltype(_impl_.subchannel_ref_)*/{}
  , /*decltype(_impl_.socket_ref_)*/{}
  , /*decltype(_impl_.ref_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelDefaultTypeInternal() {}
  union {
    Channel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelDefaultTypeInternal _Channel_default_instance_;
PROTOBUF_CONSTEXPR Subchannel::Subchannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_ref_)*/{}
  , /*decltype(_impl_.subchannel_ref_)*/{}
  , /*decltype(_impl_.socket_ref_)*/{}
  , /*decltype(_impl_.ref_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubchannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubchannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubchannelDefaultTypeInternal() {}
  union {
    Subchannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubchannelDefaultTypeInternal _Subchannel_default_instance_;
PROTOBUF_CONSTEXPR ChannelConnectivityState::ChannelConnectivityState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelConnectivityStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelConnectivityStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelConnectivityStateDefaultTypeInternal() {}
  union {
    ChannelConnectivityState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelConnectivityStateDefaultTypeInternal _ChannelConnectivityState_default_instance_;
PROTOBUF_CONSTEXPR ChannelData::ChannelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.trace_)*/nullptr
  , /*decltype(_impl_.last_call_started_timestamp_)*/nullptr
  , /*decltype(_impl_.calls_started_)*/int64_t{0}
  , /*decltype(_impl_.calls_succeeded_)*/int64_t{0}
  , /*decltype(_impl_.calls_failed_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelDataDefaultTypeInternal() {}
  union {
    ChannelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelDataDefaultTypeInternal _ChannelData_default_instance_;
PROTOBUF_CONSTEXPR ChannelTraceEvent::ChannelTraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.severity_)*/0
  , /*decltype(_impl_.child_ref_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ChannelTraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelTraceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelTraceEventDefaultTypeInternal() {}
  union {
    ChannelTraceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelTraceEventDefaultTypeInternal _ChannelTraceEvent_default_instance_;
PROTOBUF_CONSTEXPR ChannelTrace::ChannelTrace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.creation_timestamp_)*/nullptr
  , /*decltype(_impl_.num_events_logged_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelTraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelTraceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelTraceDefaultTypeInternal() {}
  union {
    ChannelTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelTraceDefaultTypeInternal _ChannelTrace_default_instance_;
PROTOBUF_CONSTEXPR ChannelRef::ChannelRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelRefDefaultTypeInternal() {}
  union {
    ChannelRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelRefDefaultTypeInternal _ChannelRef_default_instance_;
PROTOBUF_CONSTEXPR SubchannelRef::SubchannelRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subchannel_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubchannelRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubchannelRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubchannelRefDefaultTypeInternal() {}
  union {
    SubchannelRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubchannelRefDefaultTypeInternal _SubchannelRef_default_instance_;
PROTOBUF_CONSTEXPR SocketRef::SocketRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.socket_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SocketRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketRefDefaultTypeInternal() {}
  union {
    SocketRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketRefDefaultTypeInternal _SocketRef_default_instance_;
PROTOBUF_CONSTEXPR ServerRef::ServerRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerRefDefaultTypeInternal() {}
  union {
    ServerRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerRefDefaultTypeInternal _ServerRef_default_instance_;
PROTOBUF_CONSTEXPR Server::Server(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.listen_socket_)*/{}
  , /*decltype(_impl_.ref_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerDefaultTypeInternal() {}
  union {
    Server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerDefaultTypeInternal _Server_default_instance_;
PROTOBUF_CONSTEXPR ServerData::ServerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trace_)*/nullptr
  , /*decltype(_impl_.last_call_started_timestamp_)*/nullptr
  , /*decltype(_impl_.calls_started_)*/int64_t{0}
  , /*decltype(_impl_.calls_succeeded_)*/int64_t{0}
  , /*decltype(_impl_.calls_failed_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerDataDefaultTypeInternal() {}
  union {
    ServerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerDataDefaultTypeInternal _ServerData_default_instance_;
PROTOBUF_CONSTEXPR Socket::Socket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remote_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ref_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.local_)*/nullptr
  , /*decltype(_impl_.remote_)*/nullptr
  , /*decltype(_impl_.security_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SocketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketDefaultTypeInternal() {}
  union {
    Socket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketDefaultTypeInternal _Socket_default_instance_;
PROTOBUF_CONSTEXPR SocketData::SocketData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.option_)*/{}
  , /*decltype(_impl_.last_local_stream_created_timestamp_)*/nullptr
  , /*decltype(_impl_.last_remote_stream_created_timestamp_)*/nullptr
  , /*decltype(_impl_.last_message_sent_timestamp_)*/nullptr
  , /*decltype(_impl_.last_message_received_timestamp_)*/nullptr
  , /*decltype(_impl_.local_flow_control_window_)*/nullptr
  , /*decltype(_impl_.remote_flow_control_window_)*/nullptr
  , /*decltype(_impl_.streams_started_)*/int64_t{0}
  , /*decltype(_impl_.streams_succeeded_)*/int64_t{0}
  , /*decltype(_impl_.streams_failed_)*/int64_t{0}
  , /*decltype(_impl_.messages_sent_)*/int64_t{0}
  , /*decltype(_impl_.messages_received_)*/int64_t{0}
  , /*decltype(_impl_.keep_alives_sent_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SocketDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketDataDefaultTypeInternal() {}
  union {
    SocketData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketDataDefaultTypeInternal _SocketData_default_instance_;
PROTOBUF_CONSTEXPR Address_TcpIpAddress::Address_TcpIpAddress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Address_TcpIpAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Address_TcpIpAddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Address_TcpIpAddressDefaultTypeInternal() {}
  union {
    Address_TcpIpAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Address_TcpIpAddressDefaultTypeInternal _Address_TcpIpAddress_default_instance_;
PROTOBUF_CONSTEXPR Address_UdsAddress::Address_UdsAddress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Address_UdsAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Address_UdsAddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Address_UdsAddressDefaultTypeInternal() {}
  union {
    Address_UdsAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Address_UdsAddressDefaultTypeInternal _Address_UdsAddress_default_instance_;
PROTOBUF_CONSTEXPR Address_OtherAddress::Address_OtherAddress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Address_OtherAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Address_OtherAddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Address_OtherAddressDefaultTypeInternal() {}
  union {
    Address_OtherAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Address_OtherAddressDefaultTypeInternal _Address_OtherAddress_default_instance_;
PROTOBUF_CONSTEXPR Address::Address(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddressDefaultTypeInternal() {}
  union {
    Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddressDefaultTypeInternal _Address_default_instance_;
PROTOBUF_CONSTEXPR Security_Tls::Security_Tls(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_certificate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_certificate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cipher_suite_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Security_TlsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Security_TlsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Security_TlsDefaultTypeInternal() {}
  union {
    Security_Tls _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Security_TlsDefaultTypeInternal _Security_Tls_default_instance_;
PROTOBUF_CONSTEXPR Security_OtherSecurity::Security_OtherSecurity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Security_OtherSecurityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Security_OtherSecurityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Security_OtherSecurityDefaultTypeInternal() {}
  union {
    Security_OtherSecurity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Security_OtherSecurityDefaultTypeInternal _Security_OtherSecurity_default_instance_;
PROTOBUF_CONSTEXPR Security::Security(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SecurityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityDefaultTypeInternal() {}
  union {
    Security _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityDefaultTypeInternal _Security_default_instance_;
PROTOBUF_CONSTEXPR SocketOption::SocketOption(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.additional_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SocketOptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketOptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketOptionDefaultTypeInternal() {}
  union {
    SocketOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketOptionDefaultTypeInternal _SocketOption_default_instance_;
PROTOBUF_CONSTEXPR SocketOptionTimeout::SocketOptionTimeout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SocketOptionTimeoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketOptionTimeoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketOptionTimeoutDefaultTypeInternal() {}
  union {
    SocketOptionTimeout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketOptionTimeoutDefaultTypeInternal _SocketOptionTimeout_default_instance_;
PROTOBUF_CONSTEXPR SocketOptionLinger::SocketOptionLinger(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_.active_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SocketOptionLingerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketOptionLingerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketOptionLingerDefaultTypeInternal() {}
  union {
    SocketOptionLinger _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketOptionLingerDefaultTypeInternal _SocketOptionLinger_default_instance_;
PROTOBUF_CONSTEXPR SocketOptionTcpInfo::SocketOptionTcpInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tcpi_state_)*/0u
  , /*decltype(_impl_.tcpi_ca_state_)*/0u
  , /*decltype(_impl_.tcpi_retransmits_)*/0u
  , /*decltype(_impl_.tcpi_probes_)*/0u
  , /*decltype(_impl_.tcpi_backoff_)*/0u
  , /*decltype(_impl_.tcpi_options_)*/0u
  , /*decltype(_impl_.tcpi_snd_wscale_)*/0u
  , /*decltype(_impl_.tcpi_rcv_wscale_)*/0u
  , /*decltype(_impl_.tcpi_rto_)*/0u
  , /*decltype(_impl_.tcpi_ato_)*/0u
  , /*decltype(_impl_.tcpi_snd_mss_)*/0u
  , /*decltype(_impl_.tcpi_rcv_mss_)*/0u
  , /*decltype(_impl_.tcpi_unacked_)*/0u
  , /*decltype(_impl_.tcpi_sacked_)*/0u
  , /*decltype(_impl_.tcpi_lost_)*/0u
  , /*decltype(_impl_.tcpi_retrans_)*/0u
  , /*decltype(_impl_.tcpi_fackets_)*/0u
  , /*decltype(_impl_.tcpi_last_data_sent_)*/0u
  , /*decltype(_impl_.tcpi_last_ack_sent_)*/0u
  , /*decltype(_impl_.tcpi_last_data_recv_)*/0u
  , /*decltype(_impl_.tcpi_last_ack_recv_)*/0u
  , /*decltype(_impl_.tcpi_pmtu_)*/0u
  , /*decltype(_impl_.tcpi_rcv_ssthresh_)*/0u
  , /*decltype(_impl_.tcpi_rtt_)*/0u
  , /*decltype(_impl_.tcpi_rttvar_)*/0u
  , /*decltype(_impl_.tcpi_snd_ssthresh_)*/0u
  , /*decltype(_impl_.tcpi_snd_cwnd_)*/0u
  , /*decltype(_impl_.tcpi_advmss_)*/0u
  , /*decltype(_impl_.tcpi_reordering_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SocketOptionTcpInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketOptionTcpInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketOptionTcpInfoDefaultTypeInternal() {}
  union {
    SocketOptionTcpInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketOptionTcpInfoDefaultTypeInternal _SocketOptionTcpInfo_default_instance_;
PROTOBUF_CONSTEXPR GetTopChannelsRequest::GetTopChannelsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_channel_id_)*/int64_t{0}
  , /*decltype(_impl_.max_results_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTopChannelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTopChannelsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTopChannelsRequestDefaultTypeInternal() {}
  union {
    GetTopChannelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTopChannelsRequestDefaultTypeInternal _GetTopChannelsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTopChannelsResponse::GetTopChannelsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_)*/{}
  , /*decltype(_impl_.end_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTopChannelsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTopChannelsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTopChannelsResponseDefaultTypeInternal() {}
  union {
    GetTopChannelsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTopChannelsResponseDefaultTypeInternal _GetTopChannelsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetServersRequest::GetServersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_server_id_)*/int64_t{0}
  , /*decltype(_impl_.max_results_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServersRequestDefaultTypeInternal() {}
  union {
    GetServersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServersRequestDefaultTypeInternal _GetServersRequest_default_instance_;
PROTOBUF_CONSTEXPR GetServersResponse::GetServersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_)*/{}
  , /*decltype(_impl_.end_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServersResponseDefaultTypeInternal() {}
  union {
    GetServersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServersResponseDefaultTypeInternal _GetServersResponse_default_instance_;
PROTOBUF_CONSTEXPR GetServerRequest::GetServerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServerRequestDefaultTypeInternal() {}
  union {
    GetServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServerRequestDefaultTypeInternal _GetServerRequest_default_instance_;
PROTOBUF_CONSTEXPR GetServerResponse::GetServerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServerResponseDefaultTypeInternal() {}
  union {
    GetServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServerResponseDefaultTypeInternal _GetServerResponse_default_instance_;
PROTOBUF_CONSTEXPR GetServerSocketsRequest::GetServerSocketsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_id_)*/int64_t{0}
  , /*decltype(_impl_.start_socket_id_)*/int64_t{0}
  , /*decltype(_impl_.max_results_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServerSocketsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServerSocketsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServerSocketsRequestDefaultTypeInternal() {}
  union {
    GetServerSocketsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServerSocketsRequestDefaultTypeInternal _GetServerSocketsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetServerSocketsResponse::GetServerSocketsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.socket_ref_)*/{}
  , /*decltype(_impl_.end_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServerSocketsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServerSocketsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServerSocketsResponseDefaultTypeInternal() {}
  union {
    GetServerSocketsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServerSocketsResponseDefaultTypeInternal _GetServerSocketsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetChannelRequest::GetChannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChannelRequestDefaultTypeInternal() {}
  union {
    GetChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChannelRequestDefaultTypeInternal _GetChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR GetChannelResponse::GetChannelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetChannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChannelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChannelResponseDefaultTypeInternal() {}
  union {
    GetChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChannelResponseDefaultTypeInternal _GetChannelResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSubchannelRequest::GetSubchannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subchannel_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSubchannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSubchannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSubchannelRequestDefaultTypeInternal() {}
  union {
    GetSubchannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSubchannelRequestDefaultTypeInternal _GetSubchannelRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSubchannelResponse::GetSubchannelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subchannel_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSubchannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSubchannelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSubchannelResponseDefaultTypeInternal() {}
  union {
    GetSubchannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSubchannelResponseDefaultTypeInternal _GetSubchannelResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSocketRequest::GetSocketRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.socket_id_)*/int64_t{0}
  , /*decltype(_impl_.summary_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSocketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSocketRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSocketRequestDefaultTypeInternal() {}
  union {
    GetSocketRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSocketRequestDefaultTypeInternal _GetSocketRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSocketResponse::GetSocketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.socket_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSocketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSocketResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSocketResponseDefaultTypeInternal() {}
  union {
    GetSocketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSocketResponseDefaultTypeInternal _GetSocketResponse_default_instance_;
}  // namespace v1
}  // namespace channelz
}  // namespace grpc
static ::_pb::Metadata file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[39];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto = nullptr;

const uint32_t TableStruct_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, _impl_.ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, _impl_.channel_ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, _impl_.subchannel_ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Channel, _impl_.socket_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, _impl_.ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, _impl_.channel_ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, _impl_.subchannel_ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Subchannel, _impl_.socket_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelConnectivityState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelConnectivityState, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, _impl_.trace_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, _impl_.calls_started_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, _impl_.calls_succeeded_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, _impl_.calls_failed_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelData, _impl_.last_call_started_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, _impl_.severity_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, _impl_.timestamp_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTraceEvent, _impl_.child_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, _impl_.num_events_logged_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, _impl_.creation_timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelTrace, _impl_.events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelRef, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ChannelRef, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SubchannelRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SubchannelRef, _impl_.subchannel_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SubchannelRef, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketRef, _impl_.socket_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketRef, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerRef, _impl_.server_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerRef, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Server, _impl_.ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Server, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Server, _impl_.listen_socket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, _impl_.trace_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, _impl_.calls_started_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, _impl_.calls_succeeded_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, _impl_.calls_failed_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::ServerData, _impl_.last_call_started_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, _impl_.ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, _impl_.local_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, _impl_.remote_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, _impl_.security_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Socket, _impl_.remote_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.streams_started_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.streams_succeeded_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.streams_failed_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.messages_sent_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.messages_received_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.keep_alives_sent_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.last_local_stream_created_timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.last_remote_stream_created_timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.last_message_sent_timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.last_message_received_timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.local_flow_control_window_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.remote_flow_control_window_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketData, _impl_.option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_TcpIpAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_TcpIpAddress, _impl_.ip_address_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_TcpIpAddress, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_UdsAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_UdsAddress, _impl_.filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_OtherAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_OtherAddress, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address_OtherAddress, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Address, _impl_.address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, _impl_.local_certificate_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, _impl_.remote_certificate_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_Tls, _impl_.cipher_suite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_OtherSecurity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_OtherSecurity, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security_OtherSecurity, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::Security, _impl_.model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOption, _impl_.additional_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTimeout, _impl_.duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionLinger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionLinger, _impl_.active_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionLinger, _impl_.duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_state_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_ca_state_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_retransmits_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_probes_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_backoff_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_options_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_snd_wscale_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_rcv_wscale_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_rto_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_ato_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_snd_mss_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_rcv_mss_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_unacked_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_sacked_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_lost_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_retrans_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_fackets_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_last_data_sent_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_last_ack_sent_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_last_data_recv_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_last_ack_recv_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_pmtu_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_rcv_ssthresh_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_rtt_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_rttvar_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_snd_ssthresh_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_snd_cwnd_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_advmss_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::SocketOptionTcpInfo, _impl_.tcpi_reordering_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsRequest, _impl_.start_channel_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsRequest, _impl_.max_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsResponse, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetTopChannelsResponse, _impl_.end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersRequest, _impl_.start_server_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersRequest, _impl_.max_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersResponse, _impl_.server_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServersResponse, _impl_.end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerRequest, _impl_.server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerResponse, _impl_.server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsRequest, _impl_.server_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsRequest, _impl_.start_socket_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsRequest, _impl_.max_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsResponse, _impl_.socket_ref_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetServerSocketsResponse, _impl_.end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetChannelRequest, _impl_.channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetChannelResponse, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelRequest, _impl_.subchannel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSubchannelResponse, _impl_.subchannel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSocketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSocketRequest, _impl_.socket_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSocketRequest, _impl_.summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSocketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpc::channelz::v1::GetSocketResponse, _impl_.socket_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpc::channelz::v1::Channel)},
  { 11, -1, -1, sizeof(::grpc::channelz::v1::Subchannel)},
  { 22, -1, -1, sizeof(::grpc::channelz::v1::ChannelConnectivityState)},
  { 29, -1, -1, sizeof(::grpc::channelz::v1::ChannelData)},
  { 42, -1, -1, sizeof(::grpc::channelz::v1::ChannelTraceEvent)},
  { 54, -1, -1, sizeof(::grpc::channelz::v1::ChannelTrace)},
  { 63, -1, -1, sizeof(::grpc::channelz::v1::ChannelRef)},
  { 71, -1, -1, sizeof(::grpc::channelz::v1::SubchannelRef)},
  { 79, -1, -1, sizeof(::grpc::channelz::v1::SocketRef)},
  { 87, -1, -1, sizeof(::grpc::channelz::v1::ServerRef)},
  { 95, -1, -1, sizeof(::grpc::channelz::v1::Server)},
  { 104, -1, -1, sizeof(::grpc::channelz::v1::ServerData)},
  { 115, -1, -1, sizeof(::grpc::channelz::v1::Socket)},
  { 127, -1, -1, sizeof(::grpc::channelz::v1::SocketData)},
  { 146, -1, -1, sizeof(::grpc::channelz::v1::Address_TcpIpAddress)},
  { 154, -1, -1, sizeof(::grpc::channelz::v1::Address_UdsAddress)},
  { 161, -1, -1, sizeof(::grpc::channelz::v1::Address_OtherAddress)},
  { 169, -1, -1, sizeof(::grpc::channelz::v1::Address)},
  { 179, -1, -1, sizeof(::grpc::channelz::v1::Security_Tls)},
  { 190, -1, -1, sizeof(::grpc::channelz::v1::Security_OtherSecurity)},
  { 198, -1, -1, sizeof(::grpc::channelz::v1::Security)},
  { 207, -1, -1, sizeof(::grpc::channelz::v1::SocketOption)},
  { 216, -1, -1, sizeof(::grpc::channelz::v1::SocketOptionTimeout)},
  { 223, -1, -1, sizeof(::grpc::channelz::v1::SocketOptionLinger)},
  { 231, -1, -1, sizeof(::grpc::channelz::v1::SocketOptionTcpInfo)},
  { 266, -1, -1, sizeof(::grpc::channelz::v1::GetTopChannelsRequest)},
  { 274, -1, -1, sizeof(::grpc::channelz::v1::GetTopChannelsResponse)},
  { 282, -1, -1, sizeof(::grpc::channelz::v1::GetServersRequest)},
  { 290, -1, -1, sizeof(::grpc::channelz::v1::GetServersResponse)},
  { 298, -1, -1, sizeof(::grpc::channelz::v1::GetServerRequest)},
  { 305, -1, -1, sizeof(::grpc::channelz::v1::GetServerResponse)},
  { 312, -1, -1, sizeof(::grpc::channelz::v1::GetServerSocketsRequest)},
  { 321, -1, -1, sizeof(::grpc::channelz::v1::GetServerSocketsResponse)},
  { 329, -1, -1, sizeof(::grpc::channelz::v1::GetChannelRequest)},
  { 336, -1, -1, sizeof(::grpc::channelz::v1::GetChannelResponse)},
  { 343, -1, -1, sizeof(::grpc::channelz::v1::GetSubchannelRequest)},
  { 350, -1, -1, sizeof(::grpc::channelz::v1::GetSubchannelResponse)},
  { 357, -1, -1, sizeof(::grpc::channelz::v1::GetSocketRequest)},
  { 365, -1, -1, sizeof(::grpc::channelz::v1::GetSocketResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpc::channelz::v1::_Channel_default_instance_._instance,
  &::grpc::channelz::v1::_Subchannel_default_instance_._instance,
  &::grpc::channelz::v1::_ChannelConnectivityState_default_instance_._instance,
  &::grpc::channelz::v1::_ChannelData_default_instance_._instance,
  &::grpc::channelz::v1::_ChannelTraceEvent_default_instance_._instance,
  &::grpc::channelz::v1::_ChannelTrace_default_instance_._instance,
  &::grpc::channelz::v1::_ChannelRef_default_instance_._instance,
  &::grpc::channelz::v1::_SubchannelRef_default_instance_._instance,
  &::grpc::channelz::v1::_SocketRef_default_instance_._instance,
  &::grpc::channelz::v1::_ServerRef_default_instance_._instance,
  &::grpc::channelz::v1::_Server_default_instance_._instance,
  &::grpc::channelz::v1::_ServerData_default_instance_._instance,
  &::grpc::channelz::v1::_Socket_default_instance_._instance,
  &::grpc::channelz::v1::_SocketData_default_instance_._instance,
  &::grpc::channelz::v1::_Address_TcpIpAddress_default_instance_._instance,
  &::grpc::channelz::v1::_Address_UdsAddress_default_instance_._instance,
  &::grpc::channelz::v1::_Address_OtherAddress_default_instance_._instance,
  &::grpc::channelz::v1::_Address_default_instance_._instance,
  &::grpc::channelz::v1::_Security_Tls_default_instance_._instance,
  &::grpc::channelz::v1::_Security_OtherSecurity_default_instance_._instance,
  &::grpc::channelz::v1::_Security_default_instance_._instance,
  &::grpc::channelz::v1::_SocketOption_default_instance_._instance,
  &::grpc::channelz::v1::_SocketOptionTimeout_default_instance_._instance,
  &::grpc::channelz::v1::_SocketOptionLinger_default_instance_._instance,
  &::grpc::channelz::v1::_SocketOptionTcpInfo_default_instance_._instance,
  &::grpc::channelz::v1::_GetTopChannelsRequest_default_instance_._instance,
  &::grpc::channelz::v1::_GetTopChannelsResponse_default_instance_._instance,
  &::grpc::channelz::v1::_GetServersRequest_default_instance_._instance,
  &::grpc::channelz::v1::_GetServersResponse_default_instance_._instance,
  &::grpc::channelz::v1::_GetServerRequest_default_instance_._instance,
  &::grpc::channelz::v1::_GetServerResponse_default_instance_._instance,
  &::grpc::channelz::v1::_GetServerSocketsRequest_default_instance_._instance,
  &::grpc::channelz::v1::_GetServerSocketsResponse_default_instance_._instance,
  &::grpc::channelz::v1::_GetChannelRequest_default_instance_._instance,
  &::grpc::channelz::v1::_GetChannelResponse_default_instance_._instance,
  &::grpc::channelz::v1::_GetSubchannelRequest_default_instance_._instance,
  &::grpc::channelz::v1::_GetSubchannelResponse_default_instance_._instance,
  &::grpc::channelz::v1::_GetSocketRequest_default_instance_._instance,
  &::grpc::channelz::v1::_GetSocketResponse_default_instance_._instance,
};

const char descriptor_table_protodef_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&src/proto/grpc/channelz/channelz.proto"
  "\022\020grpc.channelz.v1\032\031google/protobuf/any."
  "proto\032\036google/protobuf/duration.proto\032\037g"
  "oogle/protobuf/timestamp.proto\032\036google/p"
  "rotobuf/wrappers.proto\"\376\001\n\007Channel\022)\n\003re"
  "f\030\001 \001(\0132\034.grpc.channelz.v1.ChannelRef\022+\n"
  "\004data\030\002 \001(\0132\035.grpc.channelz.v1.ChannelDa"
  "ta\0221\n\013channel_ref\030\003 \003(\0132\034.grpc.channelz."
  "v1.ChannelRef\0227\n\016subchannel_ref\030\004 \003(\0132\037."
  "grpc.channelz.v1.SubchannelRef\022/\n\nsocket"
  "_ref\030\005 \003(\0132\033.grpc.channelz.v1.SocketRef\""
  "\204\002\n\nSubchannel\022,\n\003ref\030\001 \001(\0132\037.grpc.chann"
  "elz.v1.SubchannelRef\022+\n\004data\030\002 \001(\0132\035.grp"
  "c.channelz.v1.ChannelData\0221\n\013channel_ref"
  "\030\003 \003(\0132\034.grpc.channelz.v1.ChannelRef\0227\n\016"
  "subchannel_ref\030\004 \003(\0132\037.grpc.channelz.v1."
  "SubchannelRef\022/\n\nsocket_ref\030\005 \003(\0132\033.grpc"
  ".channelz.v1.SocketRef\"\273\001\n\030ChannelConnec"
  "tivityState\022\?\n\005state\030\001 \001(\01620.grpc.channe"
  "lz.v1.ChannelConnectivityState.State\"^\n\005"
  "State\022\013\n\007UNKNOWN\020\000\022\010\n\004IDLE\020\001\022\016\n\nCONNECTI"
  "NG\020\002\022\t\n\005READY\020\003\022\025\n\021TRANSIENT_FAILURE\020\004\022\014"
  "\n\010SHUTDOWN\020\005\"\216\002\n\013ChannelData\0229\n\005state\030\001 "
  "\001(\0132*.grpc.channelz.v1.ChannelConnectivi"
  "tyState\022\016\n\006target\030\002 \001(\t\022-\n\005trace\030\003 \001(\0132\036"
  ".grpc.channelz.v1.ChannelTrace\022\025\n\rcalls_"
  "started\030\004 \001(\003\022\027\n\017calls_succeeded\030\005 \001(\003\022\024"
  "\n\014calls_failed\030\006 \001(\003\022\?\n\033last_call_starte"
  "d_timestamp\030\007 \001(\0132\032.google.protobuf.Time"
  "stamp\"\333\002\n\021ChannelTraceEvent\022\023\n\013descripti"
  "on\030\001 \001(\t\022>\n\010severity\030\002 \001(\0162,.grpc.channe"
  "lz.v1.ChannelTraceEvent.Severity\022-\n\ttime"
  "stamp\030\003 \001(\0132\032.google.protobuf.Timestamp\022"
  "3\n\013channel_ref\030\004 \001(\0132\034.grpc.channelz.v1."
  "ChannelRefH\000\0229\n\016subchannel_ref\030\005 \001(\0132\037.g"
  "rpc.channelz.v1.SubchannelRefH\000\"E\n\010Sever"
  "ity\022\016\n\nCT_UNKNOWN\020\000\022\013\n\007CT_INFO\020\001\022\016\n\nCT_W"
  "ARNING\020\002\022\014\n\010CT_ERROR\020\003B\013\n\tchild_ref\"\226\001\n\014"
  "ChannelTrace\022\031\n\021num_events_logged\030\001 \001(\003\022"
  "6\n\022creation_timestamp\030\002 \001(\0132\032.google.pro"
  "tobuf.Timestamp\0223\n\006events\030\003 \003(\0132#.grpc.c"
  "hannelz.v1.ChannelTraceEvent\"R\n\nChannelR"
  "ef\022\022\n\nchannel_id\030\001 \001(\003\022\014\n\004name\030\002 \001(\tJ\004\010\003"
  "\020\004J\004\010\004\020\005J\004\010\005\020\006J\004\010\006\020\007J\004\010\007\020\010J\004\010\010\020\t\"X\n\rSubc"
  "hannelRef\022\025\n\rsubchannel_id\030\007 \001(\003\022\014\n\004name"
  "\030\010 \001(\tJ\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006J\004\010\006"
  "\020\007\"P\n\tSocketRef\022\021\n\tsocket_id\030\003 \001(\003\022\014\n\004na"
  "me\030\004 \001(\tJ\004\010\001\020\002J\004\010\002\020\003J\004\010\005\020\006J\004\010\006\020\007J\004\010\007\020\010J\004"
  "\010\010\020\t\"P\n\tServerRef\022\021\n\tserver_id\030\005 \001(\003\022\014\n\004"
  "name\030\006 \001(\tJ\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020\004J\004\010\004\020\005J\004\010\007\020\010"
  "J\004\010\010\020\t\"\222\001\n\006Server\022(\n\003ref\030\001 \001(\0132\033.grpc.ch"
  "annelz.v1.ServerRef\022*\n\004data\030\002 \001(\0132\034.grpc"
  ".channelz.v1.ServerData\0222\n\rlisten_socket"
  "\030\003 \003(\0132\033.grpc.channelz.v1.SocketRef\"\302\001\n\n"
  "ServerData\022-\n\005trace\030\001 \001(\0132\036.grpc.channel"
  "z.v1.ChannelTrace\022\025\n\rcalls_started\030\002 \001(\003"
  "\022\027\n\017calls_succeeded\030\003 \001(\003\022\024\n\014calls_faile"
  "d\030\004 \001(\003\022\?\n\033last_call_started_timestamp\030\005"
  " \001(\0132\032.google.protobuf.Timestamp\"\366\001\n\006Soc"
  "ket\022(\n\003ref\030\001 \001(\0132\033.grpc.channelz.v1.Sock"
  "etRef\022*\n\004data\030\002 \001(\0132\034.grpc.channelz.v1.S"
  "ocketData\022(\n\005local\030\003 \001(\0132\031.grpc.channelz"
  ".v1.Address\022)\n\006remote\030\004 \001(\0132\031.grpc.chann"
  "elz.v1.Address\022,\n\010security\030\005 \001(\0132\032.grpc."
  "channelz.v1.Security\022\023\n\013remote_name\030\006 \001("
  "\t\"\356\004\n\nSocketData\022\027\n\017streams_started\030\001 \001("
  "\003\022\031\n\021streams_succeeded\030\002 \001(\003\022\026\n\016streams_"
  "failed\030\003 \001(\003\022\025\n\rmessages_sent\030\004 \001(\003\022\031\n\021m"
  "essages_received\030\005 \001(\003\022\030\n\020keep_alives_se"
  "nt\030\006 \001(\003\022G\n#last_local_stream_created_ti"
  "mestamp\030\007 \001(\0132\032.google.protobuf.Timestam"
  "p\022H\n$last_remote_stream_created_timestam"
  "p\030\010 \001(\0132\032.google.protobuf.Timestamp\022\?\n\033l"
  "ast_message_sent_timestamp\030\t \001(\0132\032.googl"
  "e.protobuf.Timestamp\022C\n\037last_message_rec"
  "eived_timestamp\030\n \001(\0132\032.google.protobuf."
  "Timestamp\022>\n\031local_flow_control_window\030\013"
  " \001(\0132\033.google.protobuf.Int64Value\022\?\n\032rem"
  "ote_flow_control_window\030\014 \001(\0132\033.google.p"
  "rotobuf.Int64Value\022.\n\006option\030\r \003(\0132\036.grp"
  "c.channelz.v1.SocketOption\"\350\002\n\007Address\022\?"
  "\n\rtcpip_address\030\001 \001(\0132&.grpc.channelz.v1"
  ".Address.TcpIpAddressH\000\022;\n\013uds_address\030\002"
  " \001(\0132$.grpc.channelz.v1.Address.UdsAddre"
  "ssH\000\022\?\n\rother_address\030\003 \001(\0132&.grpc.chann"
  "elz.v1.Address.OtherAddressH\000\0320\n\014TcpIpAd"
  "dress\022\022\n\nip_address\030\001 \001(\014\022\014\n\004port\030\002 \001(\005\032"
  "\036\n\nUdsAddress\022\020\n\010filename\030\001 \001(\t\032A\n\014Other"
  "Address\022\014\n\004name\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.g"
  "oogle.protobuf.AnyB\t\n\007address\"\276\002\n\010Securi"
  "ty\022-\n\003tls\030\001 \001(\0132\036.grpc.channelz.v1.Secur"
  "ity.TlsH\000\0229\n\005other\030\002 \001(\0132(.grpc.channelz"
  ".v1.Security.OtherSecurityH\000\032{\n\003Tls\022\027\n\rs"
  "tandard_name\030\001 \001(\tH\000\022\024\n\nother_name\030\002 \001(\t"
  "H\000\022\031\n\021local_certificate\030\003 \001(\014\022\032\n\022remote_"
  "certificate\030\004 \001(\014B\016\n\014cipher_suite\032B\n\rOth"
  "erSecurity\022\014\n\004name\030\001 \001(\t\022#\n\005value\030\002 \001(\0132"
  "\024.google.protobuf.AnyB\007\n\005model\"U\n\014Socket"
  "Option\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022(\n\na"
  "dditional\030\003 \001(\0132\024.google.protobuf.Any\"B\n"
  "\023SocketOptionTimeout\022+\n\010duration\030\001 \001(\0132\031"
  ".google.protobuf.Duration\"Q\n\022SocketOptio"
  "nLinger\022\016\n\006active\030\001 \001(\010\022+\n\010duration\030\002 \001("
  "\0132\031.google.protobuf.Duration\"\256\005\n\023SocketO"
  "ptionTcpInfo\022\022\n\ntcpi_state\030\001 \001(\r\022\025\n\rtcpi"
  "_ca_state\030\002 \001(\r\022\030\n\020tcpi_retransmits\030\003 \001("
  "\r\022\023\n\013tcpi_probes\030\004 \001(\r\022\024\n\014tcpi_backoff\030\005"
  " \001(\r\022\024\n\014tcpi_options\030\006 \001(\r\022\027\n\017tcpi_snd_w"
  "scale\030\007 \001(\r\022\027\n\017tcpi_rcv_wscale\030\010 \001(\r\022\020\n\010"
  "tcpi_rto\030\t \001(\r\022\020\n\010tcpi_ato\030\n \001(\r\022\024\n\014tcpi"
  "_snd_mss\030\013 \001(\r\022\024\n\014tcpi_rcv_mss\030\014 \001(\r\022\024\n\014"
  "tcpi_unacked\030\r \001(\r\022\023\n\013tcpi_sacked\030\016 \001(\r\022"
  "\021\n\ttcpi_lost\030\017 \001(\r\022\024\n\014tcpi_retrans\030\020 \001(\r"
  "\022\024\n\014tcpi_fackets\030\021 \001(\r\022\033\n\023tcpi_last_data"
  "_sent\030\022 \001(\r\022\032\n\022tcpi_last_ack_sent\030\023 \001(\r\022"
  "\033\n\023tcpi_last_data_recv\030\024 \001(\r\022\032\n\022tcpi_las"
  "t_ack_recv\030\025 \001(\r\022\021\n\ttcpi_pmtu\030\026 \001(\r\022\031\n\021t"
  "cpi_rcv_ssthresh\030\027 \001(\r\022\020\n\010tcpi_rtt\030\030 \001(\r"
  "\022\023\n\013tcpi_rttvar\030\031 \001(\r\022\031\n\021tcpi_snd_ssthre"
  "sh\030\032 \001(\r\022\025\n\rtcpi_snd_cwnd\030\033 \001(\r\022\023\n\013tcpi_"
  "advmss\030\034 \001(\r\022\027\n\017tcpi_reordering\030\035 \001(\r\"F\n"
  "\025GetTopChannelsRequest\022\030\n\020start_channel_"
  "id\030\001 \001(\003\022\023\n\013max_results\030\002 \001(\003\"Q\n\026GetTopC"
  "hannelsResponse\022*\n\007channel\030\001 \003(\0132\031.grpc."
  "channelz.v1.Channel\022\013\n\003end\030\002 \001(\010\"A\n\021GetS"
  "erversRequest\022\027\n\017start_server_id\030\001 \001(\003\022\023"
  "\n\013max_results\030\002 \001(\003\"K\n\022GetServersRespons"
  "e\022(\n\006server\030\001 \003(\0132\030.grpc.channelz.v1.Ser"
  "ver\022\013\n\003end\030\002 \001(\010\"%\n\020GetServerRequest\022\021\n\t"
  "server_id\030\001 \001(\003\"=\n\021GetServerResponse\022(\n\006"
  "server\030\001 \001(\0132\030.grpc.channelz.v1.Server\"Z"
  "\n\027GetServerSocketsRequest\022\021\n\tserver_id\030\001"
  " \001(\003\022\027\n\017start_socket_id\030\002 \001(\003\022\023\n\013max_res"
  "ults\030\003 \001(\003\"X\n\030GetServerSocketsResponse\022/"
  "\n\nsocket_ref\030\001 \003(\0132\033.grpc.channelz.v1.So"
  "cketRef\022\013\n\003end\030\002 \001(\010\"\'\n\021GetChannelReques"
  "t\022\022\n\nchannel_id\030\001 \001(\003\"@\n\022GetChannelRespo"
  "nse\022*\n\007channel\030\001 \001(\0132\031.grpc.channelz.v1."
  "Channel\"-\n\024GetSubchannelRequest\022\025\n\rsubch"
  "annel_id\030\001 \001(\003\"I\n\025GetSubchannelResponse\022"
  "0\n\nsubchannel\030\001 \001(\0132\034.grpc.channelz.v1.S"
  "ubchannel\"6\n\020GetSocketRequest\022\021\n\tsocket_"
  "id\030\001 \001(\003\022\017\n\007summary\030\002 \001(\010\"=\n\021GetSocketRe"
  "sponse\022(\n\006socket\030\001 \001(\0132\030.grpc.channelz.v"
  "1.Socket2\232\005\n\010Channelz\022c\n\016GetTopChannels\022"
  "\'.grpc.channelz.v1.GetTopChannelsRequest"
  "\032(.grpc.channelz.v1.GetTopChannelsRespon"
  "se\022W\n\nGetServers\022#.grpc.channelz.v1.GetS"
  "erversRequest\032$.grpc.channelz.v1.GetServ"
  "ersResponse\022T\n\tGetServer\022\".grpc.channelz"
  ".v1.GetServerRequest\032#.grpc.channelz.v1."
  "GetServerResponse\022i\n\020GetServerSockets\022)."
  "grpc.channelz.v1.GetServerSocketsRequest"
  "\032*.grpc.channelz.v1.GetServerSocketsResp"
  "onse\022W\n\nGetChannel\022#.grpc.channelz.v1.Ge"
  "tChannelRequest\032$.grpc.channelz.v1.GetCh"
  "annelResponse\022`\n\rGetSubchannel\022&.grpc.ch"
  "annelz.v1.GetSubchannelRequest\032\'.grpc.ch"
  "annelz.v1.GetSubchannelResponse\022T\n\tGetSo"
  "cket\022\".grpc.channelz.v1.GetSocketRequest"
  "\032#.grpc.channelz.v1.GetSocketResponseBX\n"
  "\023io.grpc.channelz.v1B\rChannelzProtoP\001Z0g"
  "oogle.golang.org/grpc/channelz/grpc_chan"
  "nelz_v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto = {
    false, false, 6535, descriptor_table_protodef_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto,
    "src/proto/grpc/channelz/channelz.proto",
    &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once, descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_deps, 4, 39,
    schemas, file_default_instances, TableStruct_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto::offsets,
    file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto, file_level_enum_descriptors_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto,
    file_level_service_descriptors_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter() {
  return &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto(&descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto);
namespace grpc {
namespace channelz {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelConnectivityState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto);
  return file_level_enum_descriptors_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[0];
}
bool ChannelConnectivityState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChannelConnectivityState_State ChannelConnectivityState::UNKNOWN;
constexpr ChannelConnectivityState_State ChannelConnectivityState::IDLE;
constexpr ChannelConnectivityState_State ChannelConnectivityState::CONNECTING;
constexpr ChannelConnectivityState_State ChannelConnectivityState::READY;
constexpr ChannelConnectivityState_State ChannelConnectivityState::TRANSIENT_FAILURE;
constexpr ChannelConnectivityState_State ChannelConnectivityState::SHUTDOWN;
constexpr ChannelConnectivityState_State ChannelConnectivityState::State_MIN;
constexpr ChannelConnectivityState_State ChannelConnectivityState::State_MAX;
constexpr int ChannelConnectivityState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelTraceEvent_Severity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto);
  return file_level_enum_descriptors_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[1];
}
bool ChannelTraceEvent_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::CT_UNKNOWN;
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::CT_INFO;
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::CT_WARNING;
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::CT_ERROR;
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::Severity_MIN;
constexpr ChannelTraceEvent_Severity ChannelTraceEvent::Severity_MAX;
constexpr int ChannelTraceEvent::Severity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Channel::_Internal {
 public:
  static const ::grpc::channelz::v1::ChannelRef& ref(const Channel* msg);
  static const ::grpc::channelz::v1::ChannelData& data(const Channel* msg);
};

const ::grpc::channelz::v1::ChannelRef&
Channel::_Internal::ref(const Channel* msg) {
  return *msg->_impl_.ref_;
}
const ::grpc::channelz::v1::ChannelData&
Channel::_Internal::data(const Channel* msg) {
  return *msg->_impl_.data_;
}
Channel::Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Channel)
}
Channel::Channel(const Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Channel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_ref_){from._impl_.channel_ref_}
    , decltype(_impl_.subchannel_ref_){from._impl_.subchannel_ref_}
    , decltype(_impl_.socket_ref_){from._impl_.socket_ref_}
    , decltype(_impl_.ref_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ref()) {
    _this->_impl_.ref_ = new ::grpc::channelz::v1::ChannelRef(*from._impl_.ref_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::grpc::channelz::v1::ChannelData(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Channel)
}

inline void Channel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_ref_){arena}
    , decltype(_impl_.subchannel_ref_){arena}
    , decltype(_impl_.socket_ref_){arena}
    , decltype(_impl_.ref_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Channel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_ref_.~RepeatedPtrField();
  _impl_.subchannel_ref_.~RepeatedPtrField();
  _impl_.socket_ref_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ref_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void Channel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Channel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_ref_.Clear();
  _impl_.subchannel_ref_.Clear();
  _impl_.socket_ref_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.ref_ != nullptr) {
    delete _impl_.ref_;
  }
  _impl_.ref_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Channel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.ChannelRef ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ChannelData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subchannel_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_socket_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Channel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Channel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelRef ref = 1;
  if (this->_internal_has_ref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ref(this),
        _Internal::ref(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channel_ref_size()); i < n; i++) {
    const auto& repfield = this->_internal_channel_ref(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subchannel_ref_size()); i < n; i++) {
    const auto& repfield = this->_internal_subchannel_ref(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_socket_ref_size()); i < n; i++) {
    const auto& repfield = this->_internal_socket_ref(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Channel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  total_size += 1UL * this->_internal_channel_ref_size();
  for (const auto& msg : this->_impl_.channel_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  total_size += 1UL * this->_internal_subchannel_ref_size();
  for (const auto& msg : this->_impl_.subchannel_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  total_size += 1UL * this->_internal_socket_ref_size();
  for (const auto& msg : this->_impl_.socket_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .grpc.channelz.v1.ChannelRef ref = 1;
  if (this->_internal_has_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ref_);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Channel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Channel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Channel::GetClassData() const { return &_class_data_; }


void Channel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Channel*>(&to_msg);
  auto& from = static_cast<const Channel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Channel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channel_ref_.MergeFrom(from._impl_.channel_ref_);
  _this->_impl_.subchannel_ref_.MergeFrom(from._impl_.subchannel_ref_);
  _this->_impl_.socket_ref_.MergeFrom(from._impl_.socket_ref_);
  if (from._internal_has_ref()) {
    _this->_internal_mutable_ref()->::grpc::channelz::v1::ChannelRef::MergeFrom(
        from._internal_ref());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::grpc::channelz::v1::ChannelData::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::InternalSwap(Channel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channel_ref_.InternalSwap(&other->_impl_.channel_ref_);
  _impl_.subchannel_ref_.InternalSwap(&other->_impl_.subchannel_ref_);
  _impl_.socket_ref_.InternalSwap(&other->_impl_.socket_ref_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Channel, _impl_.data_)
      + sizeof(Channel::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(Channel, _impl_.ref_)>(
          reinterpret_cast<char*>(&_impl_.ref_),
          reinterpret_cast<char*>(&other->_impl_.ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Channel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[0]);
}

// ===================================================================

class Subchannel::_Internal {
 public:
  static const ::grpc::channelz::v1::SubchannelRef& ref(const Subchannel* msg);
  static const ::grpc::channelz::v1::ChannelData& data(const Subchannel* msg);
};

const ::grpc::channelz::v1::SubchannelRef&
Subchannel::_Internal::ref(const Subchannel* msg) {
  return *msg->_impl_.ref_;
}
const ::grpc::channelz::v1::ChannelData&
Subchannel::_Internal::data(const Subchannel* msg) {
  return *msg->_impl_.data_;
}
Subchannel::Subchannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Subchannel)
}
Subchannel::Subchannel(const Subchannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Subchannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_ref_){from._impl_.channel_ref_}
    , decltype(_impl_.subchannel_ref_){from._impl_.subchannel_ref_}
    , decltype(_impl_.socket_ref_){from._impl_.socket_ref_}
    , decltype(_impl_.ref_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ref()) {
    _this->_impl_.ref_ = new ::grpc::channelz::v1::SubchannelRef(*from._impl_.ref_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::grpc::channelz::v1::ChannelData(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Subchannel)
}

inline void Subchannel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_ref_){arena}
    , decltype(_impl_.subchannel_ref_){arena}
    , decltype(_impl_.socket_ref_){arena}
    , decltype(_impl_.ref_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Subchannel::~Subchannel() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Subchannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Subchannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_ref_.~RepeatedPtrField();
  _impl_.subchannel_ref_.~RepeatedPtrField();
  _impl_.socket_ref_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ref_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void Subchannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Subchannel::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Subchannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_ref_.Clear();
  _impl_.subchannel_ref_.Clear();
  _impl_.socket_ref_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.ref_ != nullptr) {
    delete _impl_.ref_;
  }
  _impl_.ref_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subchannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.SubchannelRef ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ChannelData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subchannel_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_socket_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Subchannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Subchannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.SubchannelRef ref = 1;
  if (this->_internal_has_ref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ref(this),
        _Internal::ref(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channel_ref_size()); i < n; i++) {
    const auto& repfield = this->_internal_channel_ref(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subchannel_ref_size()); i < n; i++) {
    const auto& repfield = this->_internal_subchannel_ref(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_socket_ref_size()); i < n; i++) {
    const auto& repfield = this->_internal_socket_ref(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Subchannel)
  return target;
}

size_t Subchannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Subchannel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.ChannelRef channel_ref = 3;
  total_size += 1UL * this->_internal_channel_ref_size();
  for (const auto& msg : this->_impl_.channel_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .grpc.channelz.v1.SubchannelRef subchannel_ref = 4;
  total_size += 1UL * this->_internal_subchannel_ref_size();
  for (const auto& msg : this->_impl_.subchannel_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 5;
  total_size += 1UL * this->_internal_socket_ref_size();
  for (const auto& msg : this->_impl_.socket_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .grpc.channelz.v1.SubchannelRef ref = 1;
  if (this->_internal_has_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ref_);
  }

  // .grpc.channelz.v1.ChannelData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subchannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Subchannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subchannel::GetClassData() const { return &_class_data_; }


void Subchannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Subchannel*>(&to_msg);
  auto& from = static_cast<const Subchannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Subchannel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channel_ref_.MergeFrom(from._impl_.channel_ref_);
  _this->_impl_.subchannel_ref_.MergeFrom(from._impl_.subchannel_ref_);
  _this->_impl_.socket_ref_.MergeFrom(from._impl_.socket_ref_);
  if (from._internal_has_ref()) {
    _this->_internal_mutable_ref()->::grpc::channelz::v1::SubchannelRef::MergeFrom(
        from._internal_ref());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::grpc::channelz::v1::ChannelData::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subchannel::CopyFrom(const Subchannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Subchannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subchannel::IsInitialized() const {
  return true;
}

void Subchannel::InternalSwap(Subchannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channel_ref_.InternalSwap(&other->_impl_.channel_ref_);
  _impl_.subchannel_ref_.InternalSwap(&other->_impl_.subchannel_ref_);
  _impl_.socket_ref_.InternalSwap(&other->_impl_.socket_ref_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subchannel, _impl_.data_)
      + sizeof(Subchannel::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(Subchannel, _impl_.ref_)>(
          reinterpret_cast<char*>(&_impl_.ref_),
          reinterpret_cast<char*>(&other->_impl_.ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subchannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[1]);
}

// ===================================================================

class ChannelConnectivityState::_Internal {
 public:
};

ChannelConnectivityState::ChannelConnectivityState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ChannelConnectivityState)
}
ChannelConnectivityState::ChannelConnectivityState(const ChannelConnectivityState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelConnectivityState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelConnectivityState)
}

inline void ChannelConnectivityState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChannelConnectivityState::~ChannelConnectivityState() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelConnectivityState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelConnectivityState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChannelConnectivityState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelConnectivityState::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelConnectivityState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelConnectivityState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::grpc::channelz::v1::ChannelConnectivityState_State>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelConnectivityState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelConnectivityState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelConnectivityState)
  return target;
}

size_t ChannelConnectivityState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelConnectivityState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelConnectivityState.State state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelConnectivityState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelConnectivityState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelConnectivityState::GetClassData() const { return &_class_data_; }


void ChannelConnectivityState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelConnectivityState*>(&to_msg);
  auto& from = static_cast<const ChannelConnectivityState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelConnectivityState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelConnectivityState::CopyFrom(const ChannelConnectivityState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelConnectivityState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConnectivityState::IsInitialized() const {
  return true;
}

void ChannelConnectivityState::InternalSwap(ChannelConnectivityState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelConnectivityState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[2]);
}

// ===================================================================

class ChannelData::_Internal {
 public:
  static const ::grpc::channelz::v1::ChannelConnectivityState& state(const ChannelData* msg);
  static const ::grpc::channelz::v1::ChannelTrace& trace(const ChannelData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_call_started_timestamp(const ChannelData* msg);
};

const ::grpc::channelz::v1::ChannelConnectivityState&
ChannelData::_Internal::state(const ChannelData* msg) {
  return *msg->_impl_.state_;
}
const ::grpc::channelz::v1::ChannelTrace&
ChannelData::_Internal::trace(const ChannelData* msg) {
  return *msg->_impl_.trace_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ChannelData::_Internal::last_call_started_timestamp(const ChannelData* msg) {
  return *msg->_impl_.last_call_started_timestamp_;
}
void ChannelData::clear_last_call_started_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_call_started_timestamp_ != nullptr) {
    delete _impl_.last_call_started_timestamp_;
  }
  _impl_.last_call_started_timestamp_ = nullptr;
}
ChannelData::ChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ChannelData)
}
ChannelData::ChannelData(const ChannelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.trace_){nullptr}
    , decltype(_impl_.last_call_started_timestamp_){nullptr}
    , decltype(_impl_.calls_started_){}
    , decltype(_impl_.calls_succeeded_){}
    , decltype(_impl_.calls_failed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    _this->_impl_.target_.Set(from._internal_target(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::grpc::channelz::v1::ChannelConnectivityState(*from._impl_.state_);
  }
  if (from._internal_has_trace()) {
    _this->_impl_.trace_ = new ::grpc::channelz::v1::ChannelTrace(*from._impl_.trace_);
  }
  if (from._internal_has_last_call_started_timestamp()) {
    _this->_impl_.last_call_started_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_call_started_timestamp_);
  }
  ::memcpy(&_impl_.calls_started_, &from._impl_.calls_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.calls_failed_) -
    reinterpret_cast<char*>(&_impl_.calls_started_)) + sizeof(_impl_.calls_failed_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelData)
}

inline void ChannelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.trace_){nullptr}
    , decltype(_impl_.last_call_started_timestamp_){nullptr}
    , decltype(_impl_.calls_started_){int64_t{0}}
    , decltype(_impl_.calls_succeeded_){int64_t{0}}
    , decltype(_impl_.calls_failed_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChannelData::~ChannelData() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_.Destroy();
  if (this != internal_default_instance()) delete _impl_.state_;
  if (this != internal_default_instance()) delete _impl_.trace_;
  if (this != internal_default_instance()) delete _impl_.last_call_started_timestamp_;
}

void ChannelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trace_ != nullptr) {
    delete _impl_.trace_;
  }
  _impl_.trace_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_call_started_timestamp_ != nullptr) {
    delete _impl_.last_call_started_timestamp_;
  }
  _impl_.last_call_started_timestamp_ = nullptr;
  ::memset(&_impl_.calls_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.calls_failed_) -
      reinterpret_cast<char*>(&_impl_.calls_started_)) + sizeof(_impl_.calls_failed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.ChannelConnectivityState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.ChannelData.target"));
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ChannelTrace trace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 calls_started = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.calls_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 calls_succeeded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.calls_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 calls_failed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.calls_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_call_started_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_call_started_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelConnectivityState state = 1;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // string target = 2;
  if (!this->_internal_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelData.target");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target(), target);
  }

  // .grpc.channelz.v1.ChannelTrace trace = 3;
  if (this->_internal_has_trace()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::trace(this),
        _Internal::trace(this).GetCachedSize(), target, stream);
  }

  // int64 calls_started = 4;
  if (this->_internal_calls_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_calls_started(), target);
  }

  // int64 calls_succeeded = 5;
  if (this->_internal_calls_succeeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_calls_succeeded(), target);
  }

  // int64 calls_failed = 6;
  if (this->_internal_calls_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_calls_failed(), target);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 7;
  if (this->_internal_has_last_call_started_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::last_call_started_timestamp(this),
        _Internal::last_call_started_timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelData)
  return target;
}

size_t ChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 2;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // .grpc.channelz.v1.ChannelConnectivityState state = 1;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  // .grpc.channelz.v1.ChannelTrace trace = 3;
  if (this->_internal_has_trace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 7;
  if (this->_internal_has_last_call_started_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_call_started_timestamp_);
  }

  // int64 calls_started = 4;
  if (this->_internal_calls_started() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_calls_started());
  }

  // int64 calls_succeeded = 5;
  if (this->_internal_calls_succeeded() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_calls_succeeded());
  }

  // int64 calls_failed = 6;
  if (this->_internal_calls_failed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_calls_failed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelData::GetClassData() const { return &_class_data_; }


void ChannelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelData*>(&to_msg);
  auto& from = static_cast<const ChannelData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::grpc::channelz::v1::ChannelConnectivityState::MergeFrom(
        from._internal_state());
  }
  if (from._internal_has_trace()) {
    _this->_internal_mutable_trace()->::grpc::channelz::v1::ChannelTrace::MergeFrom(
        from._internal_trace());
  }
  if (from._internal_has_last_call_started_timestamp()) {
    _this->_internal_mutable_last_call_started_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_call_started_timestamp());
  }
  if (from._internal_calls_started() != 0) {
    _this->_internal_set_calls_started(from._internal_calls_started());
  }
  if (from._internal_calls_succeeded() != 0) {
    _this->_internal_set_calls_succeeded(from._internal_calls_succeeded());
  }
  if (from._internal_calls_failed() != 0) {
    _this->_internal_set_calls_failed(from._internal_calls_failed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelData::CopyFrom(const ChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelData::IsInitialized() const {
  return true;
}

void ChannelData::InternalSwap(ChannelData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_, lhs_arena,
      &other->_impl_.target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelData, _impl_.calls_failed_)
      + sizeof(ChannelData::_impl_.calls_failed_)
      - PROTOBUF_FIELD_OFFSET(ChannelData, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[3]);
}

// ===================================================================

class ChannelTraceEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ChannelTraceEvent* msg);
  static const ::grpc::channelz::v1::ChannelRef& channel_ref(const ChannelTraceEvent* msg);
  static const ::grpc::channelz::v1::SubchannelRef& subchannel_ref(const ChannelTraceEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ChannelTraceEvent::_Internal::timestamp(const ChannelTraceEvent* msg) {
  return *msg->_impl_.timestamp_;
}
const ::grpc::channelz::v1::ChannelRef&
ChannelTraceEvent::_Internal::channel_ref(const ChannelTraceEvent* msg) {
  return *msg->_impl_.child_ref_.channel_ref_;
}
const ::grpc::channelz::v1::SubchannelRef&
ChannelTraceEvent::_Internal::subchannel_ref(const ChannelTraceEvent* msg) {
  return *msg->_impl_.child_ref_.subchannel_ref_;
}
void ChannelTraceEvent::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void ChannelTraceEvent::set_allocated_channel_ref(::grpc::channelz::v1::ChannelRef* channel_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_child_ref();
  if (channel_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(channel_ref);
    if (message_arena != submessage_arena) {
      channel_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_ref, submessage_arena);
    }
    set_has_channel_ref();
    _impl_.child_ref_.channel_ref_ = channel_ref;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelTraceEvent.channel_ref)
}
void ChannelTraceEvent::set_allocated_subchannel_ref(::grpc::channelz::v1::SubchannelRef* subchannel_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_child_ref();
  if (subchannel_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subchannel_ref);
    if (message_arena != submessage_arena) {
      subchannel_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subchannel_ref, submessage_arena);
    }
    set_has_subchannel_ref();
    _impl_.child_ref_.subchannel_ref_ = subchannel_ref;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.ChannelTraceEvent.subchannel_ref)
}
ChannelTraceEvent::ChannelTraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ChannelTraceEvent)
}
ChannelTraceEvent::ChannelTraceEvent(const ChannelTraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelTraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.severity_){}
    , decltype(_impl_.child_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.severity_ = from._impl_.severity_;
  clear_has_child_ref();
  switch (from.child_ref_case()) {
    case kChannelRef: {
      _this->_internal_mutable_channel_ref()->::grpc::channelz::v1::ChannelRef::MergeFrom(
          from._internal_channel_ref());
      break;
    }
    case kSubchannelRef: {
      _this->_internal_mutable_subchannel_ref()->::grpc::channelz::v1::SubchannelRef::MergeFrom(
          from._internal_subchannel_ref());
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelTraceEvent)
}

inline void ChannelTraceEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.severity_){0}
    , decltype(_impl_.child_ref_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_child_ref();
}

ChannelTraceEvent::~ChannelTraceEvent() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelTraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelTraceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (has_child_ref()) {
    clear_child_ref();
  }
}

void ChannelTraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelTraceEvent::clear_child_ref() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.ChannelTraceEvent)
  switch (child_ref_case()) {
    case kChannelRef: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.child_ref_.channel_ref_;
      }
      break;
    }
    case kSubchannelRef: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.child_ref_.subchannel_ref_;
      }
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CHILD_REF_NOT_SET;
}


void ChannelTraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelTraceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _impl_.severity_ = 0;
  clear_child_ref();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelTraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.ChannelTraceEvent.description"));
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::grpc::channelz::v1::ChannelTraceEvent_Severity>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ChannelRef channel_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subchannel_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelTraceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelTraceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelTraceEvent.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_severity(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.ChannelRef channel_ref = 4;
  if (_internal_has_channel_ref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::channel_ref(this),
        _Internal::channel_ref(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
  if (_internal_has_subchannel_ref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::subchannel_ref(this),
        _Internal::subchannel_ref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelTraceEvent)
  return target;
}

size_t ChannelTraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelTraceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .grpc.channelz.v1.ChannelTraceEvent.Severity severity = 2;
  if (this->_internal_severity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  switch (child_ref_case()) {
    // .grpc.channelz.v1.ChannelRef channel_ref = 4;
    case kChannelRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.child_ref_.channel_ref_);
      break;
    }
    // .grpc.channelz.v1.SubchannelRef subchannel_ref = 5;
    case kSubchannelRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.child_ref_.subchannel_ref_);
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelTraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelTraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelTraceEvent::GetClassData() const { return &_class_data_; }


void ChannelTraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelTraceEvent*>(&to_msg);
  auto& from = static_cast<const ChannelTraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelTraceEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_severity() != 0) {
    _this->_internal_set_severity(from._internal_severity());
  }
  switch (from.child_ref_case()) {
    case kChannelRef: {
      _this->_internal_mutable_channel_ref()->::grpc::channelz::v1::ChannelRef::MergeFrom(
          from._internal_channel_ref());
      break;
    }
    case kSubchannelRef: {
      _this->_internal_mutable_subchannel_ref()->::grpc::channelz::v1::SubchannelRef::MergeFrom(
          from._internal_subchannel_ref());
      break;
    }
    case CHILD_REF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelTraceEvent::CopyFrom(const ChannelTraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelTraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelTraceEvent::IsInitialized() const {
  return true;
}

void ChannelTraceEvent::InternalSwap(ChannelTraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelTraceEvent, _impl_.severity_)
      + sizeof(ChannelTraceEvent::_impl_.severity_)
      - PROTOBUF_FIELD_OFFSET(ChannelTraceEvent, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.child_ref_, other->_impl_.child_ref_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelTraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[4]);
}

// ===================================================================

class ChannelTrace::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& creation_timestamp(const ChannelTrace* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ChannelTrace::_Internal::creation_timestamp(const ChannelTrace* msg) {
  return *msg->_impl_.creation_timestamp_;
}
void ChannelTrace::clear_creation_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.creation_timestamp_ != nullptr) {
    delete _impl_.creation_timestamp_;
  }
  _impl_.creation_timestamp_ = nullptr;
}
ChannelTrace::ChannelTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ChannelTrace)
}
ChannelTrace::ChannelTrace(const ChannelTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelTrace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.creation_timestamp_){nullptr}
    , decltype(_impl_.num_events_logged_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_creation_timestamp()) {
    _this->_impl_.creation_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.creation_timestamp_);
  }
  _this->_impl_.num_events_logged_ = from._impl_.num_events_logged_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelTrace)
}

inline void ChannelTrace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.creation_timestamp_){nullptr}
    , decltype(_impl_.num_events_logged_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChannelTrace::~ChannelTrace() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelTrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.creation_timestamp_;
}

void ChannelTrace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelTrace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.creation_timestamp_ != nullptr) {
    delete _impl_.creation_timestamp_;
  }
  _impl_.creation_timestamp_ = nullptr;
  _impl_.num_events_logged_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelTrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 num_events_logged = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_events_logged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp creation_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelTrace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelTrace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_events_logged = 1;
  if (this->_internal_num_events_logged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_num_events_logged(), target);
  }

  // .google.protobuf.Timestamp creation_timestamp = 2;
  if (this->_internal_has_creation_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::creation_timestamp(this),
        _Internal::creation_timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelTrace)
  return target;
}

size_t ChannelTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelTrace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.ChannelTraceEvent events = 3;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp creation_timestamp = 2;
  if (this->_internal_has_creation_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.creation_timestamp_);
  }

  // int64 num_events_logged = 1;
  if (this->_internal_num_events_logged() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_events_logged());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelTrace::GetClassData() const { return &_class_data_; }


void ChannelTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelTrace*>(&to_msg);
  auto& from = static_cast<const ChannelTrace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelTrace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (from._internal_has_creation_timestamp()) {
    _this->_internal_mutable_creation_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_creation_timestamp());
  }
  if (from._internal_num_events_logged() != 0) {
    _this->_internal_set_num_events_logged(from._internal_num_events_logged());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelTrace::CopyFrom(const ChannelTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelTrace::IsInitialized() const {
  return true;
}

void ChannelTrace::InternalSwap(ChannelTrace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelTrace, _impl_.num_events_logged_)
      + sizeof(ChannelTrace::_impl_.num_events_logged_)
      - PROTOBUF_FIELD_OFFSET(ChannelTrace, _impl_.creation_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.creation_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.creation_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelTrace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[5]);
}

// ===================================================================

class ChannelRef::_Internal {
 public:
};

ChannelRef::ChannelRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ChannelRef)
}
ChannelRef::ChannelRef(const ChannelRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.channel_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ChannelRef)
}

inline void ChannelRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.channel_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChannelRef::~ChannelRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ChannelRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ChannelRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ChannelRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.channel_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.ChannelRef.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ChannelRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ChannelRef.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ChannelRef)
  return target;
}

size_t ChannelRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ChannelRef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelRef::GetClassData() const { return &_class_data_; }


void ChannelRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelRef*>(&to_msg);
  auto& from = static_cast<const ChannelRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ChannelRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_channel_id() != 0) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelRef::CopyFrom(const ChannelRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ChannelRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelRef::IsInitialized() const {
  return true;
}

void ChannelRef::InternalSwap(ChannelRef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.channel_id_, other->_impl_.channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[6]);
}

// ===================================================================

class SubchannelRef::_Internal {
 public:
};

SubchannelRef::SubchannelRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SubchannelRef)
}
SubchannelRef::SubchannelRef(const SubchannelRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubchannelRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.subchannel_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.subchannel_id_ = from._impl_.subchannel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SubchannelRef)
}

inline void SubchannelRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.subchannel_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubchannelRef::~SubchannelRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SubchannelRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubchannelRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SubchannelRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubchannelRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SubchannelRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.subchannel_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubchannelRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 subchannel_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.subchannel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.SubchannelRef.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubchannelRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SubchannelRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 subchannel_id = 7;
  if (this->_internal_subchannel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_subchannel_id(), target);
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SubchannelRef.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SubchannelRef)
  return target;
}

size_t SubchannelRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SubchannelRef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 subchannel_id = 7;
  if (this->_internal_subchannel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_subchannel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubchannelRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubchannelRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubchannelRef::GetClassData() const { return &_class_data_; }


void SubchannelRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubchannelRef*>(&to_msg);
  auto& from = static_cast<const SubchannelRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SubchannelRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_subchannel_id() != 0) {
    _this->_internal_set_subchannel_id(from._internal_subchannel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubchannelRef::CopyFrom(const SubchannelRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SubchannelRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubchannelRef::IsInitialized() const {
  return true;
}

void SubchannelRef::InternalSwap(SubchannelRef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.subchannel_id_, other->_impl_.subchannel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubchannelRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[7]);
}

// ===================================================================

class SocketRef::_Internal {
 public:
};

SocketRef::SocketRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketRef)
}
SocketRef::SocketRef(const SocketRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SocketRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.socket_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.socket_id_ = from._impl_.socket_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketRef)
}

inline void SocketRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.socket_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SocketRef::~SocketRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SocketRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SocketRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SocketRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.socket_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 socket_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.SocketRef.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SocketRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 socket_id = 3;
  if (this->_internal_socket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_socket_id(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketRef.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketRef)
  return target;
}

size_t SocketRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketRef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 socket_id = 3;
  if (this->_internal_socket_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_socket_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SocketRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketRef::GetClassData() const { return &_class_data_; }


void SocketRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SocketRef*>(&to_msg);
  auto& from = static_cast<const SocketRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_socket_id() != 0) {
    _this->_internal_set_socket_id(from._internal_socket_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketRef::CopyFrom(const SocketRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketRef::IsInitialized() const {
  return true;
}

void SocketRef::InternalSwap(SocketRef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.socket_id_, other->_impl_.socket_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[8]);
}

// ===================================================================

class ServerRef::_Internal {
 public:
};

ServerRef::ServerRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ServerRef)
}
ServerRef::ServerRef(const ServerRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.server_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.server_id_ = from._impl_.server_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ServerRef)
}

inline void ServerRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.server_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerRef::~ServerRef() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ServerRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ServerRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerRef::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ServerRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.server_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 server_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.ServerRef.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ServerRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 server_id = 5;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_server_id(), target);
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.ServerRef.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ServerRef)
  return target;
}

size_t ServerRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ServerRef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 6;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 server_id = 5;
  if (this->_internal_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_server_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerRef::GetClassData() const { return &_class_data_; }


void ServerRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerRef*>(&to_msg);
  auto& from = static_cast<const ServerRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ServerRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerRef::CopyFrom(const ServerRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ServerRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRef::IsInitialized() const {
  return true;
}

void ServerRef::InternalSwap(ServerRef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.server_id_, other->_impl_.server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[9]);
}

// ===================================================================

class Server::_Internal {
 public:
  static const ::grpc::channelz::v1::ServerRef& ref(const Server* msg);
  static const ::grpc::channelz::v1::ServerData& data(const Server* msg);
};

const ::grpc::channelz::v1::ServerRef&
Server::_Internal::ref(const Server* msg) {
  return *msg->_impl_.ref_;
}
const ::grpc::channelz::v1::ServerData&
Server::_Internal::data(const Server* msg) {
  return *msg->_impl_.data_;
}
Server::Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Server)
}
Server::Server(const Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Server* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.listen_socket_){from._impl_.listen_socket_}
    , decltype(_impl_.ref_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ref()) {
    _this->_impl_.ref_ = new ::grpc::channelz::v1::ServerRef(*from._impl_.ref_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::grpc::channelz::v1::ServerData(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Server)
}

inline void Server::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.listen_socket_){arena}
    , decltype(_impl_.ref_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Server)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.listen_socket_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ref_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void Server::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Server)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.listen_socket_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.ref_ != nullptr) {
    delete _impl_.ref_;
  }
  _impl_.ref_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Server::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.ServerRef ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.ServerData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_listen_socket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Server::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Server)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ServerRef ref = 1;
  if (this->_internal_has_ref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ref(this),
        _Internal::ref(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.ServerData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_listen_socket_size()); i < n; i++) {
    const auto& repfield = this->_internal_listen_socket(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Server)
  return target;
}

size_t Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Server)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.SocketRef listen_socket = 3;
  total_size += 1UL * this->_internal_listen_socket_size();
  for (const auto& msg : this->_impl_.listen_socket_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .grpc.channelz.v1.ServerRef ref = 1;
  if (this->_internal_has_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ref_);
  }

  // .grpc.channelz.v1.ServerData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Server::GetClassData() const { return &_class_data_; }


void Server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Server*>(&to_msg);
  auto& from = static_cast<const Server&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Server)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.listen_socket_.MergeFrom(from._impl_.listen_socket_);
  if (from._internal_has_ref()) {
    _this->_internal_mutable_ref()->::grpc::channelz::v1::ServerRef::MergeFrom(
        from._internal_ref());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::grpc::channelz::v1::ServerData::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  return true;
}

void Server::InternalSwap(Server* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.listen_socket_.InternalSwap(&other->_impl_.listen_socket_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Server, _impl_.data_)
      + sizeof(Server::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(Server, _impl_.ref_)>(
          reinterpret_cast<char*>(&_impl_.ref_),
          reinterpret_cast<char*>(&other->_impl_.ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Server::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[10]);
}

// ===================================================================

class ServerData::_Internal {
 public:
  static const ::grpc::channelz::v1::ChannelTrace& trace(const ServerData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_call_started_timestamp(const ServerData* msg);
};

const ::grpc::channelz::v1::ChannelTrace&
ServerData::_Internal::trace(const ServerData* msg) {
  return *msg->_impl_.trace_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ServerData::_Internal::last_call_started_timestamp(const ServerData* msg) {
  return *msg->_impl_.last_call_started_timestamp_;
}
void ServerData::clear_last_call_started_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_call_started_timestamp_ != nullptr) {
    delete _impl_.last_call_started_timestamp_;
  }
  _impl_.last_call_started_timestamp_ = nullptr;
}
ServerData::ServerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.ServerData)
}
ServerData::ServerData(const ServerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_){nullptr}
    , decltype(_impl_.last_call_started_timestamp_){nullptr}
    , decltype(_impl_.calls_started_){}
    , decltype(_impl_.calls_succeeded_){}
    , decltype(_impl_.calls_failed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trace()) {
    _this->_impl_.trace_ = new ::grpc::channelz::v1::ChannelTrace(*from._impl_.trace_);
  }
  if (from._internal_has_last_call_started_timestamp()) {
    _this->_impl_.last_call_started_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_call_started_timestamp_);
  }
  ::memcpy(&_impl_.calls_started_, &from._impl_.calls_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.calls_failed_) -
    reinterpret_cast<char*>(&_impl_.calls_started_)) + sizeof(_impl_.calls_failed_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.ServerData)
}

inline void ServerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_){nullptr}
    , decltype(_impl_.last_call_started_timestamp_){nullptr}
    , decltype(_impl_.calls_started_){int64_t{0}}
    , decltype(_impl_.calls_succeeded_){int64_t{0}}
    , decltype(_impl_.calls_failed_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerData::~ServerData() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.ServerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.trace_;
  if (this != internal_default_instance()) delete _impl_.last_call_started_timestamp_;
}

void ServerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerData::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.ServerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.trace_ != nullptr) {
    delete _impl_.trace_;
  }
  _impl_.trace_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_call_started_timestamp_ != nullptr) {
    delete _impl_.last_call_started_timestamp_;
  }
  _impl_.last_call_started_timestamp_ = nullptr;
  ::memset(&_impl_.calls_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.calls_failed_) -
      reinterpret_cast<char*>(&_impl_.calls_started_)) + sizeof(_impl_.calls_failed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.ChannelTrace trace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 calls_started = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.calls_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 calls_succeeded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.calls_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 calls_failed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.calls_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_call_started_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_call_started_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.ServerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelTrace trace = 1;
  if (this->_internal_has_trace()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trace(this),
        _Internal::trace(this).GetCachedSize(), target, stream);
  }

  // int64 calls_started = 2;
  if (this->_internal_calls_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_calls_started(), target);
  }

  // int64 calls_succeeded = 3;
  if (this->_internal_calls_succeeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_calls_succeeded(), target);
  }

  // int64 calls_failed = 4;
  if (this->_internal_calls_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_calls_failed(), target);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 5;
  if (this->_internal_has_last_call_started_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::last_call_started_timestamp(this),
        _Internal::last_call_started_timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.ServerData)
  return target;
}

size_t ServerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.ServerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.ChannelTrace trace = 1;
  if (this->_internal_has_trace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_);
  }

  // .google.protobuf.Timestamp last_call_started_timestamp = 5;
  if (this->_internal_has_last_call_started_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_call_started_timestamp_);
  }

  // int64 calls_started = 2;
  if (this->_internal_calls_started() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_calls_started());
  }

  // int64 calls_succeeded = 3;
  if (this->_internal_calls_succeeded() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_calls_succeeded());
  }

  // int64 calls_failed = 4;
  if (this->_internal_calls_failed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_calls_failed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerData::GetClassData() const { return &_class_data_; }


void ServerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerData*>(&to_msg);
  auto& from = static_cast<const ServerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.ServerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trace()) {
    _this->_internal_mutable_trace()->::grpc::channelz::v1::ChannelTrace::MergeFrom(
        from._internal_trace());
  }
  if (from._internal_has_last_call_started_timestamp()) {
    _this->_internal_mutable_last_call_started_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_call_started_timestamp());
  }
  if (from._internal_calls_started() != 0) {
    _this->_internal_set_calls_started(from._internal_calls_started());
  }
  if (from._internal_calls_succeeded() != 0) {
    _this->_internal_set_calls_succeeded(from._internal_calls_succeeded());
  }
  if (from._internal_calls_failed() != 0) {
    _this->_internal_set_calls_failed(from._internal_calls_failed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerData::CopyFrom(const ServerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.ServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerData::IsInitialized() const {
  return true;
}

void ServerData::InternalSwap(ServerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerData, _impl_.calls_failed_)
      + sizeof(ServerData::_impl_.calls_failed_)
      - PROTOBUF_FIELD_OFFSET(ServerData, _impl_.trace_)>(
          reinterpret_cast<char*>(&_impl_.trace_),
          reinterpret_cast<char*>(&other->_impl_.trace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[11]);
}

// ===================================================================

class Socket::_Internal {
 public:
  static const ::grpc::channelz::v1::SocketRef& ref(const Socket* msg);
  static const ::grpc::channelz::v1::SocketData& data(const Socket* msg);
  static const ::grpc::channelz::v1::Address& local(const Socket* msg);
  static const ::grpc::channelz::v1::Address& remote(const Socket* msg);
  static const ::grpc::channelz::v1::Security& security(const Socket* msg);
};

const ::grpc::channelz::v1::SocketRef&
Socket::_Internal::ref(const Socket* msg) {
  return *msg->_impl_.ref_;
}
const ::grpc::channelz::v1::SocketData&
Socket::_Internal::data(const Socket* msg) {
  return *msg->_impl_.data_;
}
const ::grpc::channelz::v1::Address&
Socket::_Internal::local(const Socket* msg) {
  return *msg->_impl_.local_;
}
const ::grpc::channelz::v1::Address&
Socket::_Internal::remote(const Socket* msg) {
  return *msg->_impl_.remote_;
}
const ::grpc::channelz::v1::Security&
Socket::_Internal::security(const Socket* msg) {
  return *msg->_impl_.security_;
}
Socket::Socket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Socket)
}
Socket::Socket(const Socket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Socket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_name_){}
    , decltype(_impl_.ref_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.local_){nullptr}
    , decltype(_impl_.remote_){nullptr}
    , decltype(_impl_.security_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.remote_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_name().empty()) {
    _this->_impl_.remote_name_.Set(from._internal_remote_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ref()) {
    _this->_impl_.ref_ = new ::grpc::channelz::v1::SocketRef(*from._impl_.ref_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::grpc::channelz::v1::SocketData(*from._impl_.data_);
  }
  if (from._internal_has_local()) {
    _this->_impl_.local_ = new ::grpc::channelz::v1::Address(*from._impl_.local_);
  }
  if (from._internal_has_remote()) {
    _this->_impl_.remote_ = new ::grpc::channelz::v1::Address(*from._impl_.remote_);
  }
  if (from._internal_has_security()) {
    _this->_impl_.security_ = new ::grpc::channelz::v1::Security(*from._impl_.security_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Socket)
}

inline void Socket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_name_){}
    , decltype(_impl_.ref_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.local_){nullptr}
    , decltype(_impl_.remote_){nullptr}
    , decltype(_impl_.security_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.remote_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Socket::~Socket() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Socket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Socket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.remote_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ref_;
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.local_;
  if (this != internal_default_instance()) delete _impl_.remote_;
  if (this != internal_default_instance()) delete _impl_.security_;
}

void Socket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Socket::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Socket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.remote_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ref_ != nullptr) {
    delete _impl_.ref_;
  }
  _impl_.ref_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.local_ != nullptr) {
    delete _impl_.local_;
  }
  _impl_.local_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.remote_ != nullptr) {
    delete _impl_.remote_;
  }
  _impl_.remote_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.security_ != nullptr) {
    delete _impl_.security_;
  }
  _impl_.security_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Socket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.SocketRef ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.SocketData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Address local = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Address remote = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Security security = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string remote_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_remote_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.Socket.remote_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Socket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Socket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.SocketRef ref = 1;
  if (this->_internal_has_ref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ref(this),
        _Internal::ref(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.SocketData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.Address local = 3;
  if (this->_internal_has_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::local(this),
        _Internal::local(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.Address remote = 4;
  if (this->_internal_has_remote()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::remote(this),
        _Internal::remote(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.Security security = 5;
  if (this->_internal_has_security()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::security(this),
        _Internal::security(this).GetCachedSize(), target, stream);
  }

  // string remote_name = 6;
  if (!this->_internal_remote_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_name().data(), static_cast<int>(this->_internal_remote_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Socket.remote_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_remote_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Socket)
  return target;
}

size_t Socket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Socket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_name = 6;
  if (!this->_internal_remote_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_name());
  }

  // .grpc.channelz.v1.SocketRef ref = 1;
  if (this->_internal_has_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ref_);
  }

  // .grpc.channelz.v1.SocketData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .grpc.channelz.v1.Address local = 3;
  if (this->_internal_has_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_);
  }

  // .grpc.channelz.v1.Address remote = 4;
  if (this->_internal_has_remote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remote_);
  }

  // .grpc.channelz.v1.Security security = 5;
  if (this->_internal_has_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.security_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Socket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Socket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Socket::GetClassData() const { return &_class_data_; }


void Socket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Socket*>(&to_msg);
  auto& from = static_cast<const Socket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Socket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_remote_name().empty()) {
    _this->_internal_set_remote_name(from._internal_remote_name());
  }
  if (from._internal_has_ref()) {
    _this->_internal_mutable_ref()->::grpc::channelz::v1::SocketRef::MergeFrom(
        from._internal_ref());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::grpc::channelz::v1::SocketData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_local()) {
    _this->_internal_mutable_local()->::grpc::channelz::v1::Address::MergeFrom(
        from._internal_local());
  }
  if (from._internal_has_remote()) {
    _this->_internal_mutable_remote()->::grpc::channelz::v1::Address::MergeFrom(
        from._internal_remote());
  }
  if (from._internal_has_security()) {
    _this->_internal_mutable_security()->::grpc::channelz::v1::Security::MergeFrom(
        from._internal_security());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Socket::CopyFrom(const Socket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Socket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Socket::IsInitialized() const {
  return true;
}

void Socket::InternalSwap(Socket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_name_, lhs_arena,
      &other->_impl_.remote_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Socket, _impl_.security_)
      + sizeof(Socket::_impl_.security_)
      - PROTOBUF_FIELD_OFFSET(Socket, _impl_.ref_)>(
          reinterpret_cast<char*>(&_impl_.ref_),
          reinterpret_cast<char*>(&other->_impl_.ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Socket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[12]);
}

// ===================================================================

class SocketData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_local_stream_created_timestamp(const SocketData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_remote_stream_created_timestamp(const SocketData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_message_sent_timestamp(const SocketData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_message_received_timestamp(const SocketData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int64Value& local_flow_control_window(const SocketData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int64Value& remote_flow_control_window(const SocketData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SocketData::_Internal::last_local_stream_created_timestamp(const SocketData* msg) {
  return *msg->_impl_.last_local_stream_created_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SocketData::_Internal::last_remote_stream_created_timestamp(const SocketData* msg) {
  return *msg->_impl_.last_remote_stream_created_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SocketData::_Internal::last_message_sent_timestamp(const SocketData* msg) {
  return *msg->_impl_.last_message_sent_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SocketData::_Internal::last_message_received_timestamp(const SocketData* msg) {
  return *msg->_impl_.last_message_received_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Int64Value&
SocketData::_Internal::local_flow_control_window(const SocketData* msg) {
  return *msg->_impl_.local_flow_control_window_;
}
const ::PROTOBUF_NAMESPACE_ID::Int64Value&
SocketData::_Internal::remote_flow_control_window(const SocketData* msg) {
  return *msg->_impl_.remote_flow_control_window_;
}
void SocketData::clear_last_local_stream_created_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_local_stream_created_timestamp_ != nullptr) {
    delete _impl_.last_local_stream_created_timestamp_;
  }
  _impl_.last_local_stream_created_timestamp_ = nullptr;
}
void SocketData::clear_last_remote_stream_created_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_remote_stream_created_timestamp_ != nullptr) {
    delete _impl_.last_remote_stream_created_timestamp_;
  }
  _impl_.last_remote_stream_created_timestamp_ = nullptr;
}
void SocketData::clear_last_message_sent_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_message_sent_timestamp_ != nullptr) {
    delete _impl_.last_message_sent_timestamp_;
  }
  _impl_.last_message_sent_timestamp_ = nullptr;
}
void SocketData::clear_last_message_received_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_message_received_timestamp_ != nullptr) {
    delete _impl_.last_message_received_timestamp_;
  }
  _impl_.last_message_received_timestamp_ = nullptr;
}
void SocketData::clear_local_flow_control_window() {
  if (GetArenaForAllocation() == nullptr && _impl_.local_flow_control_window_ != nullptr) {
    delete _impl_.local_flow_control_window_;
  }
  _impl_.local_flow_control_window_ = nullptr;
}
void SocketData::clear_remote_flow_control_window() {
  if (GetArenaForAllocation() == nullptr && _impl_.remote_flow_control_window_ != nullptr) {
    delete _impl_.remote_flow_control_window_;
  }
  _impl_.remote_flow_control_window_ = nullptr;
}
SocketData::SocketData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketData)
}
SocketData::SocketData(const SocketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SocketData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.option_){from._impl_.option_}
    , decltype(_impl_.last_local_stream_created_timestamp_){nullptr}
    , decltype(_impl_.last_remote_stream_created_timestamp_){nullptr}
    , decltype(_impl_.last_message_sent_timestamp_){nullptr}
    , decltype(_impl_.last_message_received_timestamp_){nullptr}
    , decltype(_impl_.local_flow_control_window_){nullptr}
    , decltype(_impl_.remote_flow_control_window_){nullptr}
    , decltype(_impl_.streams_started_){}
    , decltype(_impl_.streams_succeeded_){}
    , decltype(_impl_.streams_failed_){}
    , decltype(_impl_.messages_sent_){}
    , decltype(_impl_.messages_received_){}
    , decltype(_impl_.keep_alives_sent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_local_stream_created_timestamp()) {
    _this->_impl_.last_local_stream_created_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_local_stream_created_timestamp_);
  }
  if (from._internal_has_last_remote_stream_created_timestamp()) {
    _this->_impl_.last_remote_stream_created_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_remote_stream_created_timestamp_);
  }
  if (from._internal_has_last_message_sent_timestamp()) {
    _this->_impl_.last_message_sent_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_message_sent_timestamp_);
  }
  if (from._internal_has_last_message_received_timestamp()) {
    _this->_impl_.last_message_received_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_message_received_timestamp_);
  }
  if (from._internal_has_local_flow_control_window()) {
    _this->_impl_.local_flow_control_window_ = new ::PROTOBUF_NAMESPACE_ID::Int64Value(*from._impl_.local_flow_control_window_);
  }
  if (from._internal_has_remote_flow_control_window()) {
    _this->_impl_.remote_flow_control_window_ = new ::PROTOBUF_NAMESPACE_ID::Int64Value(*from._impl_.remote_flow_control_window_);
  }
  ::memcpy(&_impl_.streams_started_, &from._impl_.streams_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.keep_alives_sent_) -
    reinterpret_cast<char*>(&_impl_.streams_started_)) + sizeof(_impl_.keep_alives_sent_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketData)
}

inline void SocketData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.option_){arena}
    , decltype(_impl_.last_local_stream_created_timestamp_){nullptr}
    , decltype(_impl_.last_remote_stream_created_timestamp_){nullptr}
    , decltype(_impl_.last_message_sent_timestamp_){nullptr}
    , decltype(_impl_.last_message_received_timestamp_){nullptr}
    , decltype(_impl_.local_flow_control_window_){nullptr}
    , decltype(_impl_.remote_flow_control_window_){nullptr}
    , decltype(_impl_.streams_started_){int64_t{0}}
    , decltype(_impl_.streams_succeeded_){int64_t{0}}
    , decltype(_impl_.streams_failed_){int64_t{0}}
    , decltype(_impl_.messages_sent_){int64_t{0}}
    , decltype(_impl_.messages_received_){int64_t{0}}
    , decltype(_impl_.keep_alives_sent_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SocketData::~SocketData() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SocketData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.option_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.last_local_stream_created_timestamp_;
  if (this != internal_default_instance()) delete _impl_.last_remote_stream_created_timestamp_;
  if (this != internal_default_instance()) delete _impl_.last_message_sent_timestamp_;
  if (this != internal_default_instance()) delete _impl_.last_message_received_timestamp_;
  if (this != internal_default_instance()) delete _impl_.local_flow_control_window_;
  if (this != internal_default_instance()) delete _impl_.remote_flow_control_window_;
}

void SocketData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SocketData::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.option_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.last_local_stream_created_timestamp_ != nullptr) {
    delete _impl_.last_local_stream_created_timestamp_;
  }
  _impl_.last_local_stream_created_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_remote_stream_created_timestamp_ != nullptr) {
    delete _impl_.last_remote_stream_created_timestamp_;
  }
  _impl_.last_remote_stream_created_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_message_sent_timestamp_ != nullptr) {
    delete _impl_.last_message_sent_timestamp_;
  }
  _impl_.last_message_sent_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_message_received_timestamp_ != nullptr) {
    delete _impl_.last_message_received_timestamp_;
  }
  _impl_.last_message_received_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.local_flow_control_window_ != nullptr) {
    delete _impl_.local_flow_control_window_;
  }
  _impl_.local_flow_control_window_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.remote_flow_control_window_ != nullptr) {
    delete _impl_.remote_flow_control_window_;
  }
  _impl_.remote_flow_control_window_ = nullptr;
  ::memset(&_impl_.streams_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.keep_alives_sent_) -
      reinterpret_cast<char*>(&_impl_.streams_started_)) + sizeof(_impl_.keep_alives_sent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 streams_started = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.streams_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 streams_succeeded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.streams_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 streams_failed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.streams_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 messages_sent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.messages_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 messages_received = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.messages_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 keep_alives_sent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.keep_alives_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_local_stream_created_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_remote_stream_created_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_message_sent_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_message_sent_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_message_received_timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_message_received_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value local_flow_control_window = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_flow_control_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value remote_flow_control_window = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_flow_control_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .grpc.channelz.v1.SocketOption option = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_option(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SocketData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 streams_started = 1;
  if (this->_internal_streams_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_streams_started(), target);
  }

  // int64 streams_succeeded = 2;
  if (this->_internal_streams_succeeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_streams_succeeded(), target);
  }

  // int64 streams_failed = 3;
  if (this->_internal_streams_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_streams_failed(), target);
  }

  // int64 messages_sent = 4;
  if (this->_internal_messages_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_messages_sent(), target);
  }

  // int64 messages_received = 5;
  if (this->_internal_messages_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_messages_received(), target);
  }

  // int64 keep_alives_sent = 6;
  if (this->_internal_keep_alives_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_keep_alives_sent(), target);
  }

  // .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
  if (this->_internal_has_last_local_stream_created_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::last_local_stream_created_timestamp(this),
        _Internal::last_local_stream_created_timestamp(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
  if (this->_internal_has_last_remote_stream_created_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::last_remote_stream_created_timestamp(this),
        _Internal::last_remote_stream_created_timestamp(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_message_sent_timestamp = 9;
  if (this->_internal_has_last_message_sent_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::last_message_sent_timestamp(this),
        _Internal::last_message_sent_timestamp(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_message_received_timestamp = 10;
  if (this->_internal_has_last_message_received_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::last_message_received_timestamp(this),
        _Internal::last_message_received_timestamp(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value local_flow_control_window = 11;
  if (this->_internal_has_local_flow_control_window()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::local_flow_control_window(this),
        _Internal::local_flow_control_window(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int64Value remote_flow_control_window = 12;
  if (this->_internal_has_remote_flow_control_window()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::remote_flow_control_window(this),
        _Internal::remote_flow_control_window(this).GetCachedSize(), target, stream);
  }

  // repeated .grpc.channelz.v1.SocketOption option = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_option_size()); i < n; i++) {
    const auto& repfield = this->_internal_option(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketData)
  return target;
}

size_t SocketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.SocketOption option = 13;
  total_size += 1UL * this->_internal_option_size();
  for (const auto& msg : this->_impl_.option_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
  if (this->_internal_has_last_local_stream_created_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_local_stream_created_timestamp_);
  }

  // .google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
  if (this->_internal_has_last_remote_stream_created_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_remote_stream_created_timestamp_);
  }

  // .google.protobuf.Timestamp last_message_sent_timestamp = 9;
  if (this->_internal_has_last_message_sent_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_message_sent_timestamp_);
  }

  // .google.protobuf.Timestamp last_message_received_timestamp = 10;
  if (this->_internal_has_last_message_received_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_message_received_timestamp_);
  }

  // .google.protobuf.Int64Value local_flow_control_window = 11;
  if (this->_internal_has_local_flow_control_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_flow_control_window_);
  }

  // .google.protobuf.Int64Value remote_flow_control_window = 12;
  if (this->_internal_has_remote_flow_control_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remote_flow_control_window_);
  }

  // int64 streams_started = 1;
  if (this->_internal_streams_started() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_streams_started());
  }

  // int64 streams_succeeded = 2;
  if (this->_internal_streams_succeeded() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_streams_succeeded());
  }

  // int64 streams_failed = 3;
  if (this->_internal_streams_failed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_streams_failed());
  }

  // int64 messages_sent = 4;
  if (this->_internal_messages_sent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messages_sent());
  }

  // int64 messages_received = 5;
  if (this->_internal_messages_received() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messages_received());
  }

  // int64 keep_alives_sent = 6;
  if (this->_internal_keep_alives_sent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_keep_alives_sent());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SocketData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketData::GetClassData() const { return &_class_data_; }


void SocketData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SocketData*>(&to_msg);
  auto& from = static_cast<const SocketData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.option_.MergeFrom(from._impl_.option_);
  if (from._internal_has_last_local_stream_created_timestamp()) {
    _this->_internal_mutable_last_local_stream_created_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_local_stream_created_timestamp());
  }
  if (from._internal_has_last_remote_stream_created_timestamp()) {
    _this->_internal_mutable_last_remote_stream_created_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_remote_stream_created_timestamp());
  }
  if (from._internal_has_last_message_sent_timestamp()) {
    _this->_internal_mutable_last_message_sent_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_message_sent_timestamp());
  }
  if (from._internal_has_last_message_received_timestamp()) {
    _this->_internal_mutable_last_message_received_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_message_received_timestamp());
  }
  if (from._internal_has_local_flow_control_window()) {
    _this->_internal_mutable_local_flow_control_window()->::PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(
        from._internal_local_flow_control_window());
  }
  if (from._internal_has_remote_flow_control_window()) {
    _this->_internal_mutable_remote_flow_control_window()->::PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(
        from._internal_remote_flow_control_window());
  }
  if (from._internal_streams_started() != 0) {
    _this->_internal_set_streams_started(from._internal_streams_started());
  }
  if (from._internal_streams_succeeded() != 0) {
    _this->_internal_set_streams_succeeded(from._internal_streams_succeeded());
  }
  if (from._internal_streams_failed() != 0) {
    _this->_internal_set_streams_failed(from._internal_streams_failed());
  }
  if (from._internal_messages_sent() != 0) {
    _this->_internal_set_messages_sent(from._internal_messages_sent());
  }
  if (from._internal_messages_received() != 0) {
    _this->_internal_set_messages_received(from._internal_messages_received());
  }
  if (from._internal_keep_alives_sent() != 0) {
    _this->_internal_set_keep_alives_sent(from._internal_keep_alives_sent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketData::CopyFrom(const SocketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketData::IsInitialized() const {
  return true;
}

void SocketData::InternalSwap(SocketData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.option_.InternalSwap(&other->_impl_.option_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocketData, _impl_.keep_alives_sent_)
      + sizeof(SocketData::_impl_.keep_alives_sent_)
      - PROTOBUF_FIELD_OFFSET(SocketData, _impl_.last_local_stream_created_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.last_local_stream_created_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.last_local_stream_created_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[13]);
}

// ===================================================================

class Address_TcpIpAddress::_Internal {
 public:
};

Address_TcpIpAddress::Address_TcpIpAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Address.TcpIpAddress)
}
Address_TcpIpAddress::Address_TcpIpAddress(const Address_TcpIpAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Address_TcpIpAddress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_address_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    _this->_impl_.ip_address_.Set(from._internal_ip_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address.TcpIpAddress)
}

inline void Address_TcpIpAddress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_address_){}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Address_TcpIpAddress::~Address_TcpIpAddress() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address.TcpIpAddress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Address_TcpIpAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_address_.Destroy();
}

void Address_TcpIpAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Address_TcpIpAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address.TcpIpAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_address_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address_TcpIpAddress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Address_TcpIpAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address.TcpIpAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address.TcpIpAddress)
  return target;
}

size_t Address_TcpIpAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address.TcpIpAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip_address());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address_TcpIpAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Address_TcpIpAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address_TcpIpAddress::GetClassData() const { return &_class_data_; }


void Address_TcpIpAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Address_TcpIpAddress*>(&to_msg);
  auto& from = static_cast<const Address_TcpIpAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address.TcpIpAddress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address_TcpIpAddress::CopyFrom(const Address_TcpIpAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address.TcpIpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address_TcpIpAddress::IsInitialized() const {
  return true;
}

void Address_TcpIpAddress::InternalSwap(Address_TcpIpAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_address_, lhs_arena,
      &other->_impl_.ip_address_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address_TcpIpAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[14]);
}

// ===================================================================

class Address_UdsAddress::_Internal {
 public:
};

Address_UdsAddress::Address_UdsAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Address.UdsAddress)
}
Address_UdsAddress::Address_UdsAddress(const Address_UdsAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Address_UdsAddress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address.UdsAddress)
}

inline void Address_UdsAddress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Address_UdsAddress::~Address_UdsAddress() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address.UdsAddress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Address_UdsAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
}

void Address_UdsAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Address_UdsAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address.UdsAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address_UdsAddress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.Address.UdsAddress.filename"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Address_UdsAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address.UdsAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Address.UdsAddress.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address.UdsAddress)
  return target;
}

size_t Address_UdsAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address.UdsAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address_UdsAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Address_UdsAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address_UdsAddress::GetClassData() const { return &_class_data_; }


void Address_UdsAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Address_UdsAddress*>(&to_msg);
  auto& from = static_cast<const Address_UdsAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address.UdsAddress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address_UdsAddress::CopyFrom(const Address_UdsAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address.UdsAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address_UdsAddress::IsInitialized() const {
  return true;
}

void Address_UdsAddress::InternalSwap(Address_UdsAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Address_UdsAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[15]);
}

// ===================================================================

class Address_OtherAddress::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& value(const Address_OtherAddress* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Address_OtherAddress::_Internal::value(const Address_OtherAddress* msg) {
  return *msg->_impl_.value_;
}
void Address_OtherAddress::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
Address_OtherAddress::Address_OtherAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Address.OtherAddress)
}
Address_OtherAddress::Address_OtherAddress(const Address_OtherAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Address_OtherAddress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address.OtherAddress)
}

inline void Address_OtherAddress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Address_OtherAddress::~Address_OtherAddress() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address.OtherAddress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Address_OtherAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void Address_OtherAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Address_OtherAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address.OtherAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address_OtherAddress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.Address.OtherAddress.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Address_OtherAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address.OtherAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Address.OtherAddress.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address.OtherAddress)
  return target;
}

size_t Address_OtherAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address.OtherAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address_OtherAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Address_OtherAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address_OtherAddress::GetClassData() const { return &_class_data_; }


void Address_OtherAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Address_OtherAddress*>(&to_msg);
  auto& from = static_cast<const Address_OtherAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address.OtherAddress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address_OtherAddress::CopyFrom(const Address_OtherAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address.OtherAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address_OtherAddress::IsInitialized() const {
  return true;
}

void Address_OtherAddress::InternalSwap(Address_OtherAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address_OtherAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[16]);
}

// ===================================================================

class Address::_Internal {
 public:
  static const ::grpc::channelz::v1::Address_TcpIpAddress& tcpip_address(const Address* msg);
  static const ::grpc::channelz::v1::Address_UdsAddress& uds_address(const Address* msg);
  static const ::grpc::channelz::v1::Address_OtherAddress& other_address(const Address* msg);
};

const ::grpc::channelz::v1::Address_TcpIpAddress&
Address::_Internal::tcpip_address(const Address* msg) {
  return *msg->_impl_.address_.tcpip_address_;
}
const ::grpc::channelz::v1::Address_UdsAddress&
Address::_Internal::uds_address(const Address* msg) {
  return *msg->_impl_.address_.uds_address_;
}
const ::grpc::channelz::v1::Address_OtherAddress&
Address::_Internal::other_address(const Address* msg) {
  return *msg->_impl_.address_.other_address_;
}
void Address::set_allocated_tcpip_address(::grpc::channelz::v1::Address_TcpIpAddress* tcpip_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_address();
  if (tcpip_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tcpip_address);
    if (message_arena != submessage_arena) {
      tcpip_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcpip_address, submessage_arena);
    }
    set_has_tcpip_address();
    _impl_.address_.tcpip_address_ = tcpip_address;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.tcpip_address)
}
void Address::set_allocated_uds_address(::grpc::channelz::v1::Address_UdsAddress* uds_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_address();
  if (uds_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uds_address);
    if (message_arena != submessage_arena) {
      uds_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uds_address, submessage_arena);
    }
    set_has_uds_address();
    _impl_.address_.uds_address_ = uds_address;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.uds_address)
}
void Address::set_allocated_other_address(::grpc::channelz::v1::Address_OtherAddress* other_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_address();
  if (other_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(other_address);
    if (message_arena != submessage_arena) {
      other_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_address, submessage_arena);
    }
    set_has_other_address();
    _impl_.address_.other_address_ = other_address;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Address.other_address)
}
Address::Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Address* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_address();
  switch (from.address_case()) {
    case kTcpipAddress: {
      _this->_internal_mutable_tcpip_address()->::grpc::channelz::v1::Address_TcpIpAddress::MergeFrom(
          from._internal_tcpip_address());
      break;
    }
    case kUdsAddress: {
      _this->_internal_mutable_uds_address()->::grpc::channelz::v1::Address_UdsAddress::MergeFrom(
          from._internal_uds_address());
      break;
    }
    case kOtherAddress: {
      _this->_internal_mutable_other_address()->::grpc::channelz::v1::Address_OtherAddress::MergeFrom(
          from._internal_other_address());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Address)
}

inline void Address::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_address();
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Address)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_address()) {
    clear_address();
  }
}

void Address::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Address::clear_address() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.Address)
  switch (address_case()) {
    case kTcpipAddress: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.address_.tcpip_address_;
      }
      break;
    }
    case kUdsAddress: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.address_.uds_address_;
      }
      break;
    }
    case kOtherAddress: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.address_.other_address_;
      }
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ADDRESS_NOT_SET;
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Address)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_address();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcpip_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uds_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Address.OtherAddress other_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Address::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Address)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
  if (_internal_has_tcpip_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tcpip_address(this),
        _Internal::tcpip_address(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
  if (_internal_has_uds_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uds_address(this),
        _Internal::uds_address(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.Address.OtherAddress other_address = 3;
  if (_internal_has_other_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::other_address(this),
        _Internal::other_address(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Address)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (address_case()) {
    // .grpc.channelz.v1.Address.TcpIpAddress tcpip_address = 1;
    case kTcpipAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.address_.tcpip_address_);
      break;
    }
    // .grpc.channelz.v1.Address.UdsAddress uds_address = 2;
    case kUdsAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.address_.uds_address_);
      break;
    }
    // .grpc.channelz.v1.Address.OtherAddress other_address = 3;
    case kOtherAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.address_.other_address_);
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address::GetClassData() const { return &_class_data_; }


void Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Address*>(&to_msg);
  auto& from = static_cast<const Address&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Address)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.address_case()) {
    case kTcpipAddress: {
      _this->_internal_mutable_tcpip_address()->::grpc::channelz::v1::Address_TcpIpAddress::MergeFrom(
          from._internal_tcpip_address());
      break;
    }
    case kUdsAddress: {
      _this->_internal_mutable_uds_address()->::grpc::channelz::v1::Address_UdsAddress::MergeFrom(
          from._internal_uds_address());
      break;
    }
    case kOtherAddress: {
      _this->_internal_mutable_other_address()->::grpc::channelz::v1::Address_OtherAddress::MergeFrom(
          from._internal_other_address());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.address_, other->_impl_.address_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[17]);
}

// ===================================================================

class Security_Tls::_Internal {
 public:
};

Security_Tls::Security_Tls(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Security.Tls)
}
Security_Tls::Security_Tls(const Security_Tls& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Security_Tls* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_certificate_){}
    , decltype(_impl_.remote_certificate_){}
    , decltype(_impl_.cipher_suite_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.local_certificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_certificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_certificate().empty()) {
    _this->_impl_.local_certificate_.Set(from._internal_local_certificate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remote_certificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_certificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_certificate().empty()) {
    _this->_impl_.remote_certificate_.Set(from._internal_remote_certificate(), 
      _this->GetArenaForAllocation());
  }
  clear_has_cipher_suite();
  switch (from.cipher_suite_case()) {
    case kStandardName: {
      _this->_internal_set_standard_name(from._internal_standard_name());
      break;
    }
    case kOtherName: {
      _this->_internal_set_other_name(from._internal_other_name());
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Security.Tls)
}

inline void Security_Tls::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_certificate_){}
    , decltype(_impl_.remote_certificate_){}
    , decltype(_impl_.cipher_suite_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.local_certificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_certificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remote_certificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_certificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_cipher_suite();
}

Security_Tls::~Security_Tls() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Security.Tls)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Security_Tls::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_certificate_.Destroy();
  _impl_.remote_certificate_.Destroy();
  if (has_cipher_suite()) {
    clear_cipher_suite();
  }
}

void Security_Tls::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Security_Tls::clear_cipher_suite() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.Security.Tls)
  switch (cipher_suite_case()) {
    case kStandardName: {
      _impl_.cipher_suite_.standard_name_.Destroy();
      break;
    }
    case kOtherName: {
      _impl_.cipher_suite_.other_name_.Destroy();
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CIPHER_SUITE_NOT_SET;
}


void Security_Tls::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Security.Tls)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_certificate_.ClearToEmpty();
  _impl_.remote_certificate_.ClearToEmpty();
  clear_cipher_suite();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Security_Tls::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string standard_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_standard_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.Security.Tls.standard_name"));
        } else
          goto handle_unusual;
        continue;
      // string other_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_other_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.Security.Tls.other_name"));
        } else
          goto handle_unusual;
        continue;
      // bytes local_certificate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_local_certificate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes remote_certificate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_remote_certificate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Security_Tls::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Security.Tls)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string standard_name = 1;
  if (_internal_has_standard_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_standard_name().data(), static_cast<int>(this->_internal_standard_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.Tls.standard_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_standard_name(), target);
  }

  // string other_name = 2;
  if (_internal_has_other_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_other_name().data(), static_cast<int>(this->_internal_other_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.Tls.other_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_other_name(), target);
  }

  // bytes local_certificate = 3;
  if (!this->_internal_local_certificate().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_local_certificate(), target);
  }

  // bytes remote_certificate = 4;
  if (!this->_internal_remote_certificate().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_remote_certificate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Security.Tls)
  return target;
}

size_t Security_Tls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Security.Tls)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes local_certificate = 3;
  if (!this->_internal_local_certificate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_local_certificate());
  }

  // bytes remote_certificate = 4;
  if (!this->_internal_remote_certificate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remote_certificate());
  }

  switch (cipher_suite_case()) {
    // string standard_name = 1;
    case kStandardName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_standard_name());
      break;
    }
    // string other_name = 2;
    case kOtherName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_other_name());
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Security_Tls::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Security_Tls::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Security_Tls::GetClassData() const { return &_class_data_; }


void Security_Tls::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Security_Tls*>(&to_msg);
  auto& from = static_cast<const Security_Tls&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Security.Tls)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_local_certificate().empty()) {
    _this->_internal_set_local_certificate(from._internal_local_certificate());
  }
  if (!from._internal_remote_certificate().empty()) {
    _this->_internal_set_remote_certificate(from._internal_remote_certificate());
  }
  switch (from.cipher_suite_case()) {
    case kStandardName: {
      _this->_internal_set_standard_name(from._internal_standard_name());
      break;
    }
    case kOtherName: {
      _this->_internal_set_other_name(from._internal_other_name());
      break;
    }
    case CIPHER_SUITE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Security_Tls::CopyFrom(const Security_Tls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Security.Tls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security_Tls::IsInitialized() const {
  return true;
}

void Security_Tls::InternalSwap(Security_Tls* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_certificate_, lhs_arena,
      &other->_impl_.local_certificate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_certificate_, lhs_arena,
      &other->_impl_.remote_certificate_, rhs_arena
  );
  swap(_impl_.cipher_suite_, other->_impl_.cipher_suite_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Security_Tls::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[18]);
}

// ===================================================================

class Security_OtherSecurity::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& value(const Security_OtherSecurity* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Security_OtherSecurity::_Internal::value(const Security_OtherSecurity* msg) {
  return *msg->_impl_.value_;
}
void Security_OtherSecurity::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
Security_OtherSecurity::Security_OtherSecurity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Security.OtherSecurity)
}
Security_OtherSecurity::Security_OtherSecurity(const Security_OtherSecurity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Security_OtherSecurity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Security.OtherSecurity)
}

inline void Security_OtherSecurity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Security_OtherSecurity::~Security_OtherSecurity() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Security.OtherSecurity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Security_OtherSecurity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void Security_OtherSecurity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Security_OtherSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Security.OtherSecurity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Security_OtherSecurity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.Security.OtherSecurity.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Security_OtherSecurity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Security.OtherSecurity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.Security.OtherSecurity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Security.OtherSecurity)
  return target;
}

size_t Security_OtherSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Security.OtherSecurity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Security_OtherSecurity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Security_OtherSecurity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Security_OtherSecurity::GetClassData() const { return &_class_data_; }


void Security_OtherSecurity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Security_OtherSecurity*>(&to_msg);
  auto& from = static_cast<const Security_OtherSecurity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Security.OtherSecurity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Security_OtherSecurity::CopyFrom(const Security_OtherSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Security.OtherSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security_OtherSecurity::IsInitialized() const {
  return true;
}

void Security_OtherSecurity::InternalSwap(Security_OtherSecurity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Security_OtherSecurity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[19]);
}

// ===================================================================

class Security::_Internal {
 public:
  static const ::grpc::channelz::v1::Security_Tls& tls(const Security* msg);
  static const ::grpc::channelz::v1::Security_OtherSecurity& other(const Security* msg);
};

const ::grpc::channelz::v1::Security_Tls&
Security::_Internal::tls(const Security* msg) {
  return *msg->_impl_.model_.tls_;
}
const ::grpc::channelz::v1::Security_OtherSecurity&
Security::_Internal::other(const Security* msg) {
  return *msg->_impl_.model_.other_;
}
void Security::set_allocated_tls(::grpc::channelz::v1::Security_Tls* tls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_model();
  if (tls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tls);
    if (message_arena != submessage_arena) {
      tls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tls, submessage_arena);
    }
    set_has_tls();
    _impl_.model_.tls_ = tls;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.tls)
}
void Security::set_allocated_other(::grpc::channelz::v1::Security_OtherSecurity* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_model();
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(other);
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    set_has_other();
    _impl_.model_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.channelz.v1.Security.other)
}
Security::Security(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.Security)
}
Security::Security(const Security& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Security* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_model();
  switch (from.model_case()) {
    case kTls: {
      _this->_internal_mutable_tls()->::grpc::channelz::v1::Security_Tls::MergeFrom(
          from._internal_tls());
      break;
    }
    case kOther: {
      _this->_internal_mutable_other()->::grpc::channelz::v1::Security_OtherSecurity::MergeFrom(
          from._internal_other());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.Security)
}

inline void Security::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_model();
}

Security::~Security() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.Security)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Security::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_model()) {
    clear_model();
  }
}

void Security::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Security::clear_model() {
// @@protoc_insertion_point(one_of_clear_start:grpc.channelz.v1.Security)
  switch (model_case()) {
    case kTls: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.model_.tls_;
      }
      break;
    }
    case kOther: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.model_.other_;
      }
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MODEL_NOT_SET;
}


void Security::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.Security)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_model();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Security::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Security.Tls tls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tls(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grpc.channelz.v1.Security.OtherSecurity other = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Security::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.Security)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Security.Tls tls = 1;
  if (_internal_has_tls()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tls(this),
        _Internal::tls(this).GetCachedSize(), target, stream);
  }

  // .grpc.channelz.v1.Security.OtherSecurity other = 2;
  if (_internal_has_other()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::other(this),
        _Internal::other(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.Security)
  return target;
}

size_t Security::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.Security)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (model_case()) {
    // .grpc.channelz.v1.Security.Tls tls = 1;
    case kTls: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.model_.tls_);
      break;
    }
    // .grpc.channelz.v1.Security.OtherSecurity other = 2;
    case kOther: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.model_.other_);
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Security::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Security::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Security::GetClassData() const { return &_class_data_; }


void Security::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Security*>(&to_msg);
  auto& from = static_cast<const Security&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.Security)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.model_case()) {
    case kTls: {
      _this->_internal_mutable_tls()->::grpc::channelz::v1::Security_Tls::MergeFrom(
          from._internal_tls());
      break;
    }
    case kOther: {
      _this->_internal_mutable_other()->::grpc::channelz::v1::Security_OtherSecurity::MergeFrom(
          from._internal_other());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Security::CopyFrom(const Security& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.Security)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security::IsInitialized() const {
  return true;
}

void Security::InternalSwap(Security* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.model_, other->_impl_.model_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Security::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[20]);
}

// ===================================================================

class SocketOption::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& additional(const SocketOption* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
SocketOption::_Internal::additional(const SocketOption* msg) {
  return *msg->_impl_.additional_;
}
void SocketOption::clear_additional() {
  if (GetArenaForAllocation() == nullptr && _impl_.additional_ != nullptr) {
    delete _impl_.additional_;
  }
  _impl_.additional_ = nullptr;
}
SocketOption::SocketOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketOption)
}
SocketOption::SocketOption(const SocketOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SocketOption* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.additional_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_additional()) {
    _this->_impl_.additional_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.additional_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOption)
}

inline void SocketOption::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.additional_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SocketOption::~SocketOption() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOption)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SocketOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.additional_;
}

void SocketOption::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SocketOption::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.additional_ != nullptr) {
    delete _impl_.additional_;
  }
  _impl_.additional_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketOption::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.SocketOption.name"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpc.channelz.v1.SocketOption.value"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any additional = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_additional(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SocketOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketOption.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc.channelz.v1.SocketOption.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // .google.protobuf.Any additional = 3;
  if (this->_internal_has_additional()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::additional(this),
        _Internal::additional(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOption)
  return target;
}

size_t SocketOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .google.protobuf.Any additional = 3;
  if (this->_internal_has_additional()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.additional_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SocketOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketOption::GetClassData() const { return &_class_data_; }


void SocketOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SocketOption*>(&to_msg);
  auto& from = static_cast<const SocketOption&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOption)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_has_additional()) {
    _this->_internal_mutable_additional()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_additional());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketOption::CopyFrom(const SocketOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOption::IsInitialized() const {
  return true;
}

void SocketOption::InternalSwap(SocketOption* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.additional_, other->_impl_.additional_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketOption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[21]);
}

// ===================================================================

class SocketOptionTimeout::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const SocketOptionTimeout* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SocketOptionTimeout::_Internal::duration(const SocketOptionTimeout* msg) {
  return *msg->_impl_.duration_;
}
void SocketOptionTimeout::clear_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
}
SocketOptionTimeout::SocketOptionTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketOptionTimeout)
}
SocketOptionTimeout::SocketOptionTimeout(const SocketOptionTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SocketOptionTimeout* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.duration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_duration()) {
    _this->_impl_.duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.duration_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOptionTimeout)
}

inline void SocketOptionTimeout::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.duration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SocketOptionTimeout::~SocketOptionTimeout() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOptionTimeout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SocketOptionTimeout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.duration_;
}

void SocketOptionTimeout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SocketOptionTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOptionTimeout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketOptionTimeout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SocketOptionTimeout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOptionTimeout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->_internal_has_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOptionTimeout)
  return target;
}

size_t SocketOptionTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOptionTimeout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketOptionTimeout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SocketOptionTimeout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketOptionTimeout::GetClassData() const { return &_class_data_; }


void SocketOptionTimeout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SocketOptionTimeout*>(&to_msg);
  auto& from = static_cast<const SocketOptionTimeout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOptionTimeout)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration()) {
    _this->_internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketOptionTimeout::CopyFrom(const SocketOptionTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOptionTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOptionTimeout::IsInitialized() const {
  return true;
}

void SocketOptionTimeout::InternalSwap(SocketOptionTimeout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.duration_, other->_impl_.duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketOptionTimeout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[22]);
}

// ===================================================================

class SocketOptionLinger::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const SocketOptionLinger* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SocketOptionLinger::_Internal::duration(const SocketOptionLinger* msg) {
  return *msg->_impl_.duration_;
}
void SocketOptionLinger::clear_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
}
SocketOptionLinger::SocketOptionLinger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketOptionLinger)
}
SocketOptionLinger::SocketOptionLinger(const SocketOptionLinger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SocketOptionLinger* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.active_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_duration()) {
    _this->_impl_.duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.duration_);
  }
  _this->_impl_.active_ = from._impl_.active_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOptionLinger)
}

inline void SocketOptionLinger::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.active_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SocketOptionLinger::~SocketOptionLinger() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOptionLinger)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SocketOptionLinger::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.duration_;
}

void SocketOptionLinger::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SocketOptionLinger::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOptionLinger)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
  _impl_.active_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketOptionLinger::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SocketOptionLinger::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOptionLinger)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  // .google.protobuf.Duration duration = 2;
  if (this->_internal_has_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOptionLinger)
  return target;
}

size_t SocketOptionLinger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOptionLinger)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 2;
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration_);
  }

  // bool active = 1;
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketOptionLinger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SocketOptionLinger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketOptionLinger::GetClassData() const { return &_class_data_; }


void SocketOptionLinger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SocketOptionLinger*>(&to_msg);
  auto& from = static_cast<const SocketOptionLinger&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOptionLinger)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration()) {
    _this->_internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_duration());
  }
  if (from._internal_active() != 0) {
    _this->_internal_set_active(from._internal_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketOptionLinger::CopyFrom(const SocketOptionLinger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOptionLinger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOptionLinger::IsInitialized() const {
  return true;
}

void SocketOptionLinger::InternalSwap(SocketOptionLinger* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocketOptionLinger, _impl_.active_)
      + sizeof(SocketOptionLinger::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(SocketOptionLinger, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketOptionLinger::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[23]);
}

// ===================================================================

class SocketOptionTcpInfo::_Internal {
 public:
};

SocketOptionTcpInfo::SocketOptionTcpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.SocketOptionTcpInfo)
}
SocketOptionTcpInfo::SocketOptionTcpInfo(const SocketOptionTcpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SocketOptionTcpInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tcpi_state_){}
    , decltype(_impl_.tcpi_ca_state_){}
    , decltype(_impl_.tcpi_retransmits_){}
    , decltype(_impl_.tcpi_probes_){}
    , decltype(_impl_.tcpi_backoff_){}
    , decltype(_impl_.tcpi_options_){}
    , decltype(_impl_.tcpi_snd_wscale_){}
    , decltype(_impl_.tcpi_rcv_wscale_){}
    , decltype(_impl_.tcpi_rto_){}
    , decltype(_impl_.tcpi_ato_){}
    , decltype(_impl_.tcpi_snd_mss_){}
    , decltype(_impl_.tcpi_rcv_mss_){}
    , decltype(_impl_.tcpi_unacked_){}
    , decltype(_impl_.tcpi_sacked_){}
    , decltype(_impl_.tcpi_lost_){}
    , decltype(_impl_.tcpi_retrans_){}
    , decltype(_impl_.tcpi_fackets_){}
    , decltype(_impl_.tcpi_last_data_sent_){}
    , decltype(_impl_.tcpi_last_ack_sent_){}
    , decltype(_impl_.tcpi_last_data_recv_){}
    , decltype(_impl_.tcpi_last_ack_recv_){}
    , decltype(_impl_.tcpi_pmtu_){}
    , decltype(_impl_.tcpi_rcv_ssthresh_){}
    , decltype(_impl_.tcpi_rtt_){}
    , decltype(_impl_.tcpi_rttvar_){}
    , decltype(_impl_.tcpi_snd_ssthresh_){}
    , decltype(_impl_.tcpi_snd_cwnd_){}
    , decltype(_impl_.tcpi_advmss_){}
    , decltype(_impl_.tcpi_reordering_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tcpi_state_, &from._impl_.tcpi_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tcpi_reordering_) -
    reinterpret_cast<char*>(&_impl_.tcpi_state_)) + sizeof(_impl_.tcpi_reordering_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.SocketOptionTcpInfo)
}

inline void SocketOptionTcpInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tcpi_state_){0u}
    , decltype(_impl_.tcpi_ca_state_){0u}
    , decltype(_impl_.tcpi_retransmits_){0u}
    , decltype(_impl_.tcpi_probes_){0u}
    , decltype(_impl_.tcpi_backoff_){0u}
    , decltype(_impl_.tcpi_options_){0u}
    , decltype(_impl_.tcpi_snd_wscale_){0u}
    , decltype(_impl_.tcpi_rcv_wscale_){0u}
    , decltype(_impl_.tcpi_rto_){0u}
    , decltype(_impl_.tcpi_ato_){0u}
    , decltype(_impl_.tcpi_snd_mss_){0u}
    , decltype(_impl_.tcpi_rcv_mss_){0u}
    , decltype(_impl_.tcpi_unacked_){0u}
    , decltype(_impl_.tcpi_sacked_){0u}
    , decltype(_impl_.tcpi_lost_){0u}
    , decltype(_impl_.tcpi_retrans_){0u}
    , decltype(_impl_.tcpi_fackets_){0u}
    , decltype(_impl_.tcpi_last_data_sent_){0u}
    , decltype(_impl_.tcpi_last_ack_sent_){0u}
    , decltype(_impl_.tcpi_last_data_recv_){0u}
    , decltype(_impl_.tcpi_last_ack_recv_){0u}
    , decltype(_impl_.tcpi_pmtu_){0u}
    , decltype(_impl_.tcpi_rcv_ssthresh_){0u}
    , decltype(_impl_.tcpi_rtt_){0u}
    , decltype(_impl_.tcpi_rttvar_){0u}
    , decltype(_impl_.tcpi_snd_ssthresh_){0u}
    , decltype(_impl_.tcpi_snd_cwnd_){0u}
    , decltype(_impl_.tcpi_advmss_){0u}
    , decltype(_impl_.tcpi_reordering_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SocketOptionTcpInfo::~SocketOptionTcpInfo() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.SocketOptionTcpInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SocketOptionTcpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SocketOptionTcpInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SocketOptionTcpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.SocketOptionTcpInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tcpi_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tcpi_reordering_) -
      reinterpret_cast<char*>(&_impl_.tcpi_state_)) + sizeof(_impl_.tcpi_reordering_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketOptionTcpInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 tcpi_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tcpi_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_ca_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tcpi_ca_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_retransmits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tcpi_retransmits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_probes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tcpi_probes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_backoff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.tcpi_backoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.tcpi_options_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_snd_wscale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.tcpi_snd_wscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_rcv_wscale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tcpi_rcv_wscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_rto = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.tcpi_rto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_ato = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.tcpi_ato_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_snd_mss = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.tcpi_snd_mss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_rcv_mss = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.tcpi_rcv_mss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_unacked = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.tcpi_unacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_sacked = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.tcpi_sacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_lost = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.tcpi_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_retrans = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.tcpi_retrans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_fackets = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.tcpi_fackets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_last_data_sent = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.tcpi_last_data_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_last_ack_sent = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.tcpi_last_ack_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_last_data_recv = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.tcpi_last_data_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_last_ack_recv = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.tcpi_last_ack_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_pmtu = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.tcpi_pmtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_rcv_ssthresh = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.tcpi_rcv_ssthresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_rtt = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.tcpi_rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_rttvar = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.tcpi_rttvar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_snd_ssthresh = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.tcpi_snd_ssthresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_snd_cwnd = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.tcpi_snd_cwnd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_advmss = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.tcpi_advmss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tcpi_reordering = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.tcpi_reordering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SocketOptionTcpInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.SocketOptionTcpInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tcpi_state = 1;
  if (this->_internal_tcpi_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tcpi_state(), target);
  }

  // uint32 tcpi_ca_state = 2;
  if (this->_internal_tcpi_ca_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tcpi_ca_state(), target);
  }

  // uint32 tcpi_retransmits = 3;
  if (this->_internal_tcpi_retransmits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tcpi_retransmits(), target);
  }

  // uint32 tcpi_probes = 4;
  if (this->_internal_tcpi_probes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tcpi_probes(), target);
  }

  // uint32 tcpi_backoff = 5;
  if (this->_internal_tcpi_backoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tcpi_backoff(), target);
  }

  // uint32 tcpi_options = 6;
  if (this->_internal_tcpi_options() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tcpi_options(), target);
  }

  // uint32 tcpi_snd_wscale = 7;
  if (this->_internal_tcpi_snd_wscale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tcpi_snd_wscale(), target);
  }

  // uint32 tcpi_rcv_wscale = 8;
  if (this->_internal_tcpi_rcv_wscale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_tcpi_rcv_wscale(), target);
  }

  // uint32 tcpi_rto = 9;
  if (this->_internal_tcpi_rto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_tcpi_rto(), target);
  }

  // uint32 tcpi_ato = 10;
  if (this->_internal_tcpi_ato() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_tcpi_ato(), target);
  }

  // uint32 tcpi_snd_mss = 11;
  if (this->_internal_tcpi_snd_mss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_tcpi_snd_mss(), target);
  }

  // uint32 tcpi_rcv_mss = 12;
  if (this->_internal_tcpi_rcv_mss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_tcpi_rcv_mss(), target);
  }

  // uint32 tcpi_unacked = 13;
  if (this->_internal_tcpi_unacked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tcpi_unacked(), target);
  }

  // uint32 tcpi_sacked = 14;
  if (this->_internal_tcpi_sacked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tcpi_sacked(), target);
  }

  // uint32 tcpi_lost = 15;
  if (this->_internal_tcpi_lost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_tcpi_lost(), target);
  }

  // uint32 tcpi_retrans = 16;
  if (this->_internal_tcpi_retrans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_tcpi_retrans(), target);
  }

  // uint32 tcpi_fackets = 17;
  if (this->_internal_tcpi_fackets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_tcpi_fackets(), target);
  }

  // uint32 tcpi_last_data_sent = 18;
  if (this->_internal_tcpi_last_data_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_tcpi_last_data_sent(), target);
  }

  // uint32 tcpi_last_ack_sent = 19;
  if (this->_internal_tcpi_last_ack_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_tcpi_last_ack_sent(), target);
  }

  // uint32 tcpi_last_data_recv = 20;
  if (this->_internal_tcpi_last_data_recv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_tcpi_last_data_recv(), target);
  }

  // uint32 tcpi_last_ack_recv = 21;
  if (this->_internal_tcpi_last_ack_recv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_tcpi_last_ack_recv(), target);
  }

  // uint32 tcpi_pmtu = 22;
  if (this->_internal_tcpi_pmtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_tcpi_pmtu(), target);
  }

  // uint32 tcpi_rcv_ssthresh = 23;
  if (this->_internal_tcpi_rcv_ssthresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_tcpi_rcv_ssthresh(), target);
  }

  // uint32 tcpi_rtt = 24;
  if (this->_internal_tcpi_rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_tcpi_rtt(), target);
  }

  // uint32 tcpi_rttvar = 25;
  if (this->_internal_tcpi_rttvar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_tcpi_rttvar(), target);
  }

  // uint32 tcpi_snd_ssthresh = 26;
  if (this->_internal_tcpi_snd_ssthresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_tcpi_snd_ssthresh(), target);
  }

  // uint32 tcpi_snd_cwnd = 27;
  if (this->_internal_tcpi_snd_cwnd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_tcpi_snd_cwnd(), target);
  }

  // uint32 tcpi_advmss = 28;
  if (this->_internal_tcpi_advmss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_tcpi_advmss(), target);
  }

  // uint32 tcpi_reordering = 29;
  if (this->_internal_tcpi_reordering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_tcpi_reordering(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.SocketOptionTcpInfo)
  return target;
}

size_t SocketOptionTcpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.SocketOptionTcpInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 tcpi_state = 1;
  if (this->_internal_tcpi_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_state());
  }

  // uint32 tcpi_ca_state = 2;
  if (this->_internal_tcpi_ca_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_ca_state());
  }

  // uint32 tcpi_retransmits = 3;
  if (this->_internal_tcpi_retransmits() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_retransmits());
  }

  // uint32 tcpi_probes = 4;
  if (this->_internal_tcpi_probes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_probes());
  }

  // uint32 tcpi_backoff = 5;
  if (this->_internal_tcpi_backoff() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_backoff());
  }

  // uint32 tcpi_options = 6;
  if (this->_internal_tcpi_options() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_options());
  }

  // uint32 tcpi_snd_wscale = 7;
  if (this->_internal_tcpi_snd_wscale() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_snd_wscale());
  }

  // uint32 tcpi_rcv_wscale = 8;
  if (this->_internal_tcpi_rcv_wscale() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_rcv_wscale());
  }

  // uint32 tcpi_rto = 9;
  if (this->_internal_tcpi_rto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_rto());
  }

  // uint32 tcpi_ato = 10;
  if (this->_internal_tcpi_ato() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_ato());
  }

  // uint32 tcpi_snd_mss = 11;
  if (this->_internal_tcpi_snd_mss() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_snd_mss());
  }

  // uint32 tcpi_rcv_mss = 12;
  if (this->_internal_tcpi_rcv_mss() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_rcv_mss());
  }

  // uint32 tcpi_unacked = 13;
  if (this->_internal_tcpi_unacked() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_unacked());
  }

  // uint32 tcpi_sacked = 14;
  if (this->_internal_tcpi_sacked() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_sacked());
  }

  // uint32 tcpi_lost = 15;
  if (this->_internal_tcpi_lost() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tcpi_lost());
  }

  // uint32 tcpi_retrans = 16;
  if (this->_internal_tcpi_retrans() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_retrans());
  }

  // uint32 tcpi_fackets = 17;
  if (this->_internal_tcpi_fackets() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_fackets());
  }

  // uint32 tcpi_last_data_sent = 18;
  if (this->_internal_tcpi_last_data_sent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_last_data_sent());
  }

  // uint32 tcpi_last_ack_sent = 19;
  if (this->_internal_tcpi_last_ack_sent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_last_ack_sent());
  }

  // uint32 tcpi_last_data_recv = 20;
  if (this->_internal_tcpi_last_data_recv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_last_data_recv());
  }

  // uint32 tcpi_last_ack_recv = 21;
  if (this->_internal_tcpi_last_ack_recv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_last_ack_recv());
  }

  // uint32 tcpi_pmtu = 22;
  if (this->_internal_tcpi_pmtu() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_pmtu());
  }

  // uint32 tcpi_rcv_ssthresh = 23;
  if (this->_internal_tcpi_rcv_ssthresh() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_rcv_ssthresh());
  }

  // uint32 tcpi_rtt = 24;
  if (this->_internal_tcpi_rtt() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_rtt());
  }

  // uint32 tcpi_rttvar = 25;
  if (this->_internal_tcpi_rttvar() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_rttvar());
  }

  // uint32 tcpi_snd_ssthresh = 26;
  if (this->_internal_tcpi_snd_ssthresh() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_snd_ssthresh());
  }

  // uint32 tcpi_snd_cwnd = 27;
  if (this->_internal_tcpi_snd_cwnd() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_snd_cwnd());
  }

  // uint32 tcpi_advmss = 28;
  if (this->_internal_tcpi_advmss() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_advmss());
  }

  // uint32 tcpi_reordering = 29;
  if (this->_internal_tcpi_reordering() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcpi_reordering());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SocketOptionTcpInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SocketOptionTcpInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SocketOptionTcpInfo::GetClassData() const { return &_class_data_; }


void SocketOptionTcpInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SocketOptionTcpInfo*>(&to_msg);
  auto& from = static_cast<const SocketOptionTcpInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.SocketOptionTcpInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tcpi_state() != 0) {
    _this->_internal_set_tcpi_state(from._internal_tcpi_state());
  }
  if (from._internal_tcpi_ca_state() != 0) {
    _this->_internal_set_tcpi_ca_state(from._internal_tcpi_ca_state());
  }
  if (from._internal_tcpi_retransmits() != 0) {
    _this->_internal_set_tcpi_retransmits(from._internal_tcpi_retransmits());
  }
  if (from._internal_tcpi_probes() != 0) {
    _this->_internal_set_tcpi_probes(from._internal_tcpi_probes());
  }
  if (from._internal_tcpi_backoff() != 0) {
    _this->_internal_set_tcpi_backoff(from._internal_tcpi_backoff());
  }
  if (from._internal_tcpi_options() != 0) {
    _this->_internal_set_tcpi_options(from._internal_tcpi_options());
  }
  if (from._internal_tcpi_snd_wscale() != 0) {
    _this->_internal_set_tcpi_snd_wscale(from._internal_tcpi_snd_wscale());
  }
  if (from._internal_tcpi_rcv_wscale() != 0) {
    _this->_internal_set_tcpi_rcv_wscale(from._internal_tcpi_rcv_wscale());
  }
  if (from._internal_tcpi_rto() != 0) {
    _this->_internal_set_tcpi_rto(from._internal_tcpi_rto());
  }
  if (from._internal_tcpi_ato() != 0) {
    _this->_internal_set_tcpi_ato(from._internal_tcpi_ato());
  }
  if (from._internal_tcpi_snd_mss() != 0) {
    _this->_internal_set_tcpi_snd_mss(from._internal_tcpi_snd_mss());
  }
  if (from._internal_tcpi_rcv_mss() != 0) {
    _this->_internal_set_tcpi_rcv_mss(from._internal_tcpi_rcv_mss());
  }
  if (from._internal_tcpi_unacked() != 0) {
    _this->_internal_set_tcpi_unacked(from._internal_tcpi_unacked());
  }
  if (from._internal_tcpi_sacked() != 0) {
    _this->_internal_set_tcpi_sacked(from._internal_tcpi_sacked());
  }
  if (from._internal_tcpi_lost() != 0) {
    _this->_internal_set_tcpi_lost(from._internal_tcpi_lost());
  }
  if (from._internal_tcpi_retrans() != 0) {
    _this->_internal_set_tcpi_retrans(from._internal_tcpi_retrans());
  }
  if (from._internal_tcpi_fackets() != 0) {
    _this->_internal_set_tcpi_fackets(from._internal_tcpi_fackets());
  }
  if (from._internal_tcpi_last_data_sent() != 0) {
    _this->_internal_set_tcpi_last_data_sent(from._internal_tcpi_last_data_sent());
  }
  if (from._internal_tcpi_last_ack_sent() != 0) {
    _this->_internal_set_tcpi_last_ack_sent(from._internal_tcpi_last_ack_sent());
  }
  if (from._internal_tcpi_last_data_recv() != 0) {
    _this->_internal_set_tcpi_last_data_recv(from._internal_tcpi_last_data_recv());
  }
  if (from._internal_tcpi_last_ack_recv() != 0) {
    _this->_internal_set_tcpi_last_ack_recv(from._internal_tcpi_last_ack_recv());
  }
  if (from._internal_tcpi_pmtu() != 0) {
    _this->_internal_set_tcpi_pmtu(from._internal_tcpi_pmtu());
  }
  if (from._internal_tcpi_rcv_ssthresh() != 0) {
    _this->_internal_set_tcpi_rcv_ssthresh(from._internal_tcpi_rcv_ssthresh());
  }
  if (from._internal_tcpi_rtt() != 0) {
    _this->_internal_set_tcpi_rtt(from._internal_tcpi_rtt());
  }
  if (from._internal_tcpi_rttvar() != 0) {
    _this->_internal_set_tcpi_rttvar(from._internal_tcpi_rttvar());
  }
  if (from._internal_tcpi_snd_ssthresh() != 0) {
    _this->_internal_set_tcpi_snd_ssthresh(from._internal_tcpi_snd_ssthresh());
  }
  if (from._internal_tcpi_snd_cwnd() != 0) {
    _this->_internal_set_tcpi_snd_cwnd(from._internal_tcpi_snd_cwnd());
  }
  if (from._internal_tcpi_advmss() != 0) {
    _this->_internal_set_tcpi_advmss(from._internal_tcpi_advmss());
  }
  if (from._internal_tcpi_reordering() != 0) {
    _this->_internal_set_tcpi_reordering(from._internal_tcpi_reordering());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SocketOptionTcpInfo::CopyFrom(const SocketOptionTcpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.SocketOptionTcpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketOptionTcpInfo::IsInitialized() const {
  return true;
}

void SocketOptionTcpInfo::InternalSwap(SocketOptionTcpInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocketOptionTcpInfo, _impl_.tcpi_reordering_)
      + sizeof(SocketOptionTcpInfo::_impl_.tcpi_reordering_)
      - PROTOBUF_FIELD_OFFSET(SocketOptionTcpInfo, _impl_.tcpi_state_)>(
          reinterpret_cast<char*>(&_impl_.tcpi_state_),
          reinterpret_cast<char*>(&other->_impl_.tcpi_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketOptionTcpInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[24]);
}

// ===================================================================

class GetTopChannelsRequest::_Internal {
 public:
};

GetTopChannelsRequest::GetTopChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetTopChannelsRequest)
}
GetTopChannelsRequest::GetTopChannelsRequest(const GetTopChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTopChannelsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_channel_id_){}
    , decltype(_impl_.max_results_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_channel_id_, &from._impl_.start_channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_results_) -
    reinterpret_cast<char*>(&_impl_.start_channel_id_)) + sizeof(_impl_.max_results_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetTopChannelsRequest)
}

inline void GetTopChannelsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_channel_id_){int64_t{0}}
    , decltype(_impl_.max_results_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTopChannelsRequest::~GetTopChannelsRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetTopChannelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTopChannelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetTopChannelsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTopChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetTopChannelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_results_) -
      reinterpret_cast<char*>(&_impl_.start_channel_id_)) + sizeof(_impl_.max_results_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTopChannelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTopChannelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetTopChannelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_channel_id = 1;
  if (this->_internal_start_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_channel_id(), target);
  }

  // int64 max_results = 2;
  if (this->_internal_max_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetTopChannelsRequest)
  return target;
}

size_t GetTopChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetTopChannelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start_channel_id = 1;
  if (this->_internal_start_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_channel_id());
  }

  // int64 max_results = 2;
  if (this->_internal_max_results() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_results());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTopChannelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTopChannelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTopChannelsRequest::GetClassData() const { return &_class_data_; }


void GetTopChannelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTopChannelsRequest*>(&to_msg);
  auto& from = static_cast<const GetTopChannelsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetTopChannelsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_channel_id() != 0) {
    _this->_internal_set_start_channel_id(from._internal_start_channel_id());
  }
  if (from._internal_max_results() != 0) {
    _this->_internal_set_max_results(from._internal_max_results());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTopChannelsRequest::CopyFrom(const GetTopChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetTopChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopChannelsRequest::IsInitialized() const {
  return true;
}

void GetTopChannelsRequest::InternalSwap(GetTopChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTopChannelsRequest, _impl_.max_results_)
      + sizeof(GetTopChannelsRequest::_impl_.max_results_)
      - PROTOBUF_FIELD_OFFSET(GetTopChannelsRequest, _impl_.start_channel_id_)>(
          reinterpret_cast<char*>(&_impl_.start_channel_id_),
          reinterpret_cast<char*>(&other->_impl_.start_channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTopChannelsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[25]);
}

// ===================================================================

class GetTopChannelsResponse::_Internal {
 public:
};

GetTopChannelsResponse::GetTopChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetTopChannelsResponse)
}
GetTopChannelsResponse::GetTopChannelsResponse(const GetTopChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTopChannelsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){from._impl_.channel_}
    , decltype(_impl_.end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.end_ = from._impl_.end_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetTopChannelsResponse)
}

inline void GetTopChannelsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){arena}
    , decltype(_impl_.end_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTopChannelsResponse::~GetTopChannelsResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetTopChannelsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTopChannelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_.~RepeatedPtrField();
}

void GetTopChannelsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTopChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetTopChannelsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_.Clear();
  _impl_.end_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTopChannelsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .grpc.channelz.v1.Channel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTopChannelsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetTopChannelsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Channel channel = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channel_size()); i < n; i++) {
    const auto& repfield = this->_internal_channel(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetTopChannelsResponse)
  return target;
}

size_t GetTopChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetTopChannelsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Channel channel = 1;
  total_size += 1UL * this->_internal_channel_size();
  for (const auto& msg : this->_impl_.channel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTopChannelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTopChannelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTopChannelsResponse::GetClassData() const { return &_class_data_; }


void GetTopChannelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTopChannelsResponse*>(&to_msg);
  auto& from = static_cast<const GetTopChannelsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetTopChannelsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channel_.MergeFrom(from._impl_.channel_);
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTopChannelsResponse::CopyFrom(const GetTopChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetTopChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopChannelsResponse::IsInitialized() const {
  return true;
}

void GetTopChannelsResponse::InternalSwap(GetTopChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channel_.InternalSwap(&other->_impl_.channel_);
  swap(_impl_.end_, other->_impl_.end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTopChannelsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[26]);
}

// ===================================================================

class GetServersRequest::_Internal {
 public:
};

GetServersRequest::GetServersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServersRequest)
}
GetServersRequest::GetServersRequest(const GetServersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_server_id_){}
    , decltype(_impl_.max_results_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_server_id_, &from._impl_.start_server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_results_) -
    reinterpret_cast<char*>(&_impl_.start_server_id_)) + sizeof(_impl_.max_results_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServersRequest)
}

inline void GetServersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_server_id_){int64_t{0}}
    , decltype(_impl_.max_results_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetServersRequest::~GetServersRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_results_) -
      reinterpret_cast<char*>(&_impl_.start_server_id_)) + sizeof(_impl_.max_results_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_server_id = 1;
  if (this->_internal_start_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_server_id(), target);
  }

  // int64 max_results = 2;
  if (this->_internal_max_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServersRequest)
  return target;
}

size_t GetServersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start_server_id = 1;
  if (this->_internal_start_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_server_id());
  }

  // int64 max_results = 2;
  if (this->_internal_max_results() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_results());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServersRequest::GetClassData() const { return &_class_data_; }


void GetServersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServersRequest*>(&to_msg);
  auto& from = static_cast<const GetServersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_server_id() != 0) {
    _this->_internal_set_start_server_id(from._internal_start_server_id());
  }
  if (from._internal_max_results() != 0) {
    _this->_internal_set_max_results(from._internal_max_results());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServersRequest::CopyFrom(const GetServersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServersRequest::IsInitialized() const {
  return true;
}

void GetServersRequest::InternalSwap(GetServersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServersRequest, _impl_.max_results_)
      + sizeof(GetServersRequest::_impl_.max_results_)
      - PROTOBUF_FIELD_OFFSET(GetServersRequest, _impl_.start_server_id_)>(
          reinterpret_cast<char*>(&_impl_.start_server_id_),
          reinterpret_cast<char*>(&other->_impl_.start_server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[27]);
}

// ===================================================================

class GetServersResponse::_Internal {
 public:
};

GetServersResponse::GetServersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServersResponse)
}
GetServersResponse::GetServersResponse(const GetServersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_){from._impl_.server_}
    , decltype(_impl_.end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.end_ = from._impl_.end_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServersResponse)
}

inline void GetServersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_){arena}
    , decltype(_impl_.end_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetServersResponse::~GetServersResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_.~RepeatedPtrField();
}

void GetServersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_.Clear();
  _impl_.end_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .grpc.channelz.v1.Server server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_server(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Server server = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_server_size()); i < n; i++) {
    const auto& repfield = this->_internal_server(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServersResponse)
  return target;
}

size_t GetServersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.Server server = 1;
  total_size += 1UL * this->_internal_server_size();
  for (const auto& msg : this->_impl_.server_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServersResponse::GetClassData() const { return &_class_data_; }


void GetServersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServersResponse*>(&to_msg);
  auto& from = static_cast<const GetServersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.server_.MergeFrom(from._impl_.server_);
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServersResponse::CopyFrom(const GetServersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServersResponse::IsInitialized() const {
  return true;
}

void GetServersResponse::InternalSwap(GetServersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.server_.InternalSwap(&other->_impl_.server_);
  swap(_impl_.end_, other->_impl_.end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[28]);
}

// ===================================================================

class GetServerRequest::_Internal {
 public:
};

GetServerRequest::GetServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServerRequest)
}
GetServerRequest::GetServerRequest(const GetServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.server_id_ = from._impl_.server_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServerRequest)
}

inline void GetServerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetServerRequest::~GetServerRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServerRequest)
  return target;
}

size_t GetServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_server_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerRequest::GetClassData() const { return &_class_data_; }


void GetServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServerRequest*>(&to_msg);
  auto& from = static_cast<const GetServerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerRequest::CopyFrom(const GetServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerRequest::IsInitialized() const {
  return true;
}

void GetServerRequest::InternalSwap(GetServerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.server_id_, other->_impl_.server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[29]);
}

// ===================================================================

class GetServerResponse::_Internal {
 public:
  static const ::grpc::channelz::v1::Server& server(const GetServerResponse* msg);
};

const ::grpc::channelz::v1::Server&
GetServerResponse::_Internal::server(const GetServerResponse* msg) {
  return *msg->_impl_.server_;
}
GetServerResponse::GetServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServerResponse)
}
GetServerResponse::GetServerResponse(const GetServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server()) {
    _this->_impl_.server_ = new ::grpc::channelz::v1::Server(*from._impl_.server_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServerResponse)
}

inline void GetServerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetServerResponse::~GetServerResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.server_;
}

void GetServerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.server_ != nullptr) {
    delete _impl_.server_;
  }
  _impl_.server_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Server server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Server server = 1;
  if (this->_internal_has_server()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::server(this),
        _Internal::server(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServerResponse)
  return target;
}

size_t GetServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.Server server = 1;
  if (this->_internal_has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerResponse::GetClassData() const { return &_class_data_; }


void GetServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServerResponse*>(&to_msg);
  auto& from = static_cast<const GetServerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server()) {
    _this->_internal_mutable_server()->::grpc::channelz::v1::Server::MergeFrom(
        from._internal_server());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerResponse::CopyFrom(const GetServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerResponse::IsInitialized() const {
  return true;
}

void GetServerResponse::InternalSwap(GetServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.server_, other->_impl_.server_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[30]);
}

// ===================================================================

class GetServerSocketsRequest::_Internal {
 public:
};

GetServerSocketsRequest::GetServerSocketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServerSocketsRequest)
}
GetServerSocketsRequest::GetServerSocketsRequest(const GetServerSocketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServerSocketsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_id_){}
    , decltype(_impl_.start_socket_id_){}
    , decltype(_impl_.max_results_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.server_id_, &from._impl_.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_results_) -
    reinterpret_cast<char*>(&_impl_.server_id_)) + sizeof(_impl_.max_results_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServerSocketsRequest)
}

inline void GetServerSocketsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_id_){int64_t{0}}
    , decltype(_impl_.start_socket_id_){int64_t{0}}
    , decltype(_impl_.max_results_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetServerSocketsRequest::~GetServerSocketsRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServerSocketsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServerSocketsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServerSocketsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServerSocketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServerSocketsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_results_) -
      reinterpret_cast<char*>(&_impl_.server_id_)) + sizeof(_impl_.max_results_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerSocketsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_socket_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.start_socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServerSocketsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServerSocketsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_server_id(), target);
  }

  // int64 start_socket_id = 2;
  if (this->_internal_start_socket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_start_socket_id(), target);
  }

  // int64 max_results = 3;
  if (this->_internal_max_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServerSocketsRequest)
  return target;
}

size_t GetServerSocketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServerSocketsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_server_id());
  }

  // int64 start_socket_id = 2;
  if (this->_internal_start_socket_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_socket_id());
  }

  // int64 max_results = 3;
  if (this->_internal_max_results() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_results());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerSocketsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServerSocketsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerSocketsRequest::GetClassData() const { return &_class_data_; }


void GetServerSocketsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServerSocketsRequest*>(&to_msg);
  auto& from = static_cast<const GetServerSocketsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServerSocketsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  if (from._internal_start_socket_id() != 0) {
    _this->_internal_set_start_socket_id(from._internal_start_socket_id());
  }
  if (from._internal_max_results() != 0) {
    _this->_internal_set_max_results(from._internal_max_results());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerSocketsRequest::CopyFrom(const GetServerSocketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServerSocketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerSocketsRequest::IsInitialized() const {
  return true;
}

void GetServerSocketsRequest::InternalSwap(GetServerSocketsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServerSocketsRequest, _impl_.max_results_)
      + sizeof(GetServerSocketsRequest::_impl_.max_results_)
      - PROTOBUF_FIELD_OFFSET(GetServerSocketsRequest, _impl_.server_id_)>(
          reinterpret_cast<char*>(&_impl_.server_id_),
          reinterpret_cast<char*>(&other->_impl_.server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerSocketsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[31]);
}

// ===================================================================

class GetServerSocketsResponse::_Internal {
 public:
};

GetServerSocketsResponse::GetServerSocketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetServerSocketsResponse)
}
GetServerSocketsResponse::GetServerSocketsResponse(const GetServerSocketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServerSocketsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.socket_ref_){from._impl_.socket_ref_}
    , decltype(_impl_.end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.end_ = from._impl_.end_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetServerSocketsResponse)
}

inline void GetServerSocketsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.socket_ref_){arena}
    , decltype(_impl_.end_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetServerSocketsResponse::~GetServerSocketsResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetServerSocketsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServerSocketsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.socket_ref_.~RepeatedPtrField();
}

void GetServerSocketsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServerSocketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetServerSocketsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.socket_ref_.Clear();
  _impl_.end_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerSocketsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_socket_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServerSocketsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetServerSocketsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_socket_ref_size()); i < n; i++) {
    const auto& repfield = this->_internal_socket_ref(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetServerSocketsResponse)
  return target;
}

size_t GetServerSocketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetServerSocketsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grpc.channelz.v1.SocketRef socket_ref = 1;
  total_size += 1UL * this->_internal_socket_ref_size();
  for (const auto& msg : this->_impl_.socket_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool end = 2;
  if (this->_internal_end() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerSocketsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServerSocketsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerSocketsResponse::GetClassData() const { return &_class_data_; }


void GetServerSocketsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServerSocketsResponse*>(&to_msg);
  auto& from = static_cast<const GetServerSocketsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetServerSocketsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.socket_ref_.MergeFrom(from._impl_.socket_ref_);
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerSocketsResponse::CopyFrom(const GetServerSocketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetServerSocketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerSocketsResponse::IsInitialized() const {
  return true;
}

void GetServerSocketsResponse::InternalSwap(GetServerSocketsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.socket_ref_.InternalSwap(&other->_impl_.socket_ref_);
  swap(_impl_.end_, other->_impl_.end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerSocketsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[32]);
}

// ===================================================================

class GetChannelRequest::_Internal {
 public:
};

GetChannelRequest::GetChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetChannelRequest)
}
GetChannelRequest::GetChannelRequest(const GetChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetChannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetChannelRequest)
}

inline void GetChannelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetChannelRequest::~GetChannelRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetChannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetChannelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChannelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetChannelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetChannelRequest)
  return target;
}

size_t GetChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetChannelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 channel_id = 1;
  if (this->_internal_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelRequest::GetClassData() const { return &_class_data_; }


void GetChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetChannelRequest*>(&to_msg);
  auto& from = static_cast<const GetChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetChannelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel_id() != 0) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelRequest::CopyFrom(const GetChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelRequest::IsInitialized() const {
  return true;
}

void GetChannelRequest::InternalSwap(GetChannelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.channel_id_, other->_impl_.channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[33]);
}

// ===================================================================

class GetChannelResponse::_Internal {
 public:
  static const ::grpc::channelz::v1::Channel& channel(const GetChannelResponse* msg);
};

const ::grpc::channelz::v1::Channel&
GetChannelResponse::_Internal::channel(const GetChannelResponse* msg) {
  return *msg->_impl_.channel_;
}
GetChannelResponse::GetChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetChannelResponse)
}
GetChannelResponse::GetChannelResponse(const GetChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetChannelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel()) {
    _this->_impl_.channel_ = new ::grpc::channelz::v1::Channel(*from._impl_.channel_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetChannelResponse)
}

inline void GetChannelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetChannelResponse::~GetChannelResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetChannelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.channel_;
}

void GetChannelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetChannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.channel_ != nullptr) {
    delete _impl_.channel_;
  }
  _impl_.channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Channel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetChannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Channel channel = 1;
  if (this->_internal_has_channel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::channel(this),
        _Internal::channel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetChannelResponse)
  return target;
}

size_t GetChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetChannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.Channel channel = 1;
  if (this->_internal_has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.channel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelResponse::GetClassData() const { return &_class_data_; }


void GetChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetChannelResponse*>(&to_msg);
  auto& from = static_cast<const GetChannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetChannelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel()) {
    _this->_internal_mutable_channel()->::grpc::channelz::v1::Channel::MergeFrom(
        from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelResponse::CopyFrom(const GetChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelResponse::IsInitialized() const {
  return true;
}

void GetChannelResponse::InternalSwap(GetChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.channel_, other->_impl_.channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[34]);
}

// ===================================================================

class GetSubchannelRequest::_Internal {
 public:
};

GetSubchannelRequest::GetSubchannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetSubchannelRequest)
}
GetSubchannelRequest::GetSubchannelRequest(const GetSubchannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSubchannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subchannel_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.subchannel_id_ = from._impl_.subchannel_id_;
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSubchannelRequest)
}

inline void GetSubchannelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subchannel_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSubchannelRequest::~GetSubchannelRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSubchannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSubchannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSubchannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSubchannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSubchannelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subchannel_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSubchannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 subchannel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.subchannel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSubchannelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSubchannelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 subchannel_id = 1;
  if (this->_internal_subchannel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_subchannel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSubchannelRequest)
  return target;
}

size_t GetSubchannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSubchannelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 subchannel_id = 1;
  if (this->_internal_subchannel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_subchannel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSubchannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSubchannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSubchannelRequest::GetClassData() const { return &_class_data_; }


void GetSubchannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSubchannelRequest*>(&to_msg);
  auto& from = static_cast<const GetSubchannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSubchannelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_subchannel_id() != 0) {
    _this->_internal_set_subchannel_id(from._internal_subchannel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSubchannelRequest::CopyFrom(const GetSubchannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSubchannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubchannelRequest::IsInitialized() const {
  return true;
}

void GetSubchannelRequest::InternalSwap(GetSubchannelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.subchannel_id_, other->_impl_.subchannel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubchannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[35]);
}

// ===================================================================

class GetSubchannelResponse::_Internal {
 public:
  static const ::grpc::channelz::v1::Subchannel& subchannel(const GetSubchannelResponse* msg);
};

const ::grpc::channelz::v1::Subchannel&
GetSubchannelResponse::_Internal::subchannel(const GetSubchannelResponse* msg) {
  return *msg->_impl_.subchannel_;
}
GetSubchannelResponse::GetSubchannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetSubchannelResponse)
}
GetSubchannelResponse::GetSubchannelResponse(const GetSubchannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSubchannelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subchannel_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subchannel()) {
    _this->_impl_.subchannel_ = new ::grpc::channelz::v1::Subchannel(*from._impl_.subchannel_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSubchannelResponse)
}

inline void GetSubchannelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subchannel_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSubchannelResponse::~GetSubchannelResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSubchannelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSubchannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.subchannel_;
}

void GetSubchannelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSubchannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSubchannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.subchannel_ != nullptr) {
    delete _impl_.subchannel_;
  }
  _impl_.subchannel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSubchannelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Subchannel subchannel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subchannel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSubchannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSubchannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Subchannel subchannel = 1;
  if (this->_internal_has_subchannel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::subchannel(this),
        _Internal::subchannel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSubchannelResponse)
  return target;
}

size_t GetSubchannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSubchannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.Subchannel subchannel = 1;
  if (this->_internal_has_subchannel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subchannel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSubchannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSubchannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSubchannelResponse::GetClassData() const { return &_class_data_; }


void GetSubchannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSubchannelResponse*>(&to_msg);
  auto& from = static_cast<const GetSubchannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSubchannelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subchannel()) {
    _this->_internal_mutable_subchannel()->::grpc::channelz::v1::Subchannel::MergeFrom(
        from._internal_subchannel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSubchannelResponse::CopyFrom(const GetSubchannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSubchannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubchannelResponse::IsInitialized() const {
  return true;
}

void GetSubchannelResponse::InternalSwap(GetSubchannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.subchannel_, other->_impl_.subchannel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubchannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[36]);
}

// ===================================================================

class GetSocketRequest::_Internal {
 public:
};

GetSocketRequest::GetSocketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetSocketRequest)
}
GetSocketRequest::GetSocketRequest(const GetSocketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSocketRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.socket_id_){}
    , decltype(_impl_.summary_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.socket_id_, &from._impl_.socket_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.summary_) -
    reinterpret_cast<char*>(&_impl_.socket_id_)) + sizeof(_impl_.summary_));
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSocketRequest)
}

inline void GetSocketRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.socket_id_){int64_t{0}}
    , decltype(_impl_.summary_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSocketRequest::~GetSocketRequest() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSocketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSocketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSocketRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSocketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSocketRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.socket_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.summary_) -
      reinterpret_cast<char*>(&_impl_.socket_id_)) + sizeof(_impl_.summary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSocketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 socket_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.summary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSocketRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSocketRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 socket_id = 1;
  if (this->_internal_socket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_socket_id(), target);
  }

  // bool summary = 2;
  if (this->_internal_summary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_summary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSocketRequest)
  return target;
}

size_t GetSocketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSocketRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 socket_id = 1;
  if (this->_internal_socket_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_socket_id());
  }

  // bool summary = 2;
  if (this->_internal_summary() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSocketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSocketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSocketRequest::GetClassData() const { return &_class_data_; }


void GetSocketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSocketRequest*>(&to_msg);
  auto& from = static_cast<const GetSocketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSocketRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_socket_id() != 0) {
    _this->_internal_set_socket_id(from._internal_socket_id());
  }
  if (from._internal_summary() != 0) {
    _this->_internal_set_summary(from._internal_summary());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSocketRequest::CopyFrom(const GetSocketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSocketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSocketRequest::IsInitialized() const {
  return true;
}

void GetSocketRequest::InternalSwap(GetSocketRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSocketRequest, _impl_.summary_)
      + sizeof(GetSocketRequest::_impl_.summary_)
      - PROTOBUF_FIELD_OFFSET(GetSocketRequest, _impl_.socket_id_)>(
          reinterpret_cast<char*>(&_impl_.socket_id_),
          reinterpret_cast<char*>(&other->_impl_.socket_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSocketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[37]);
}

// ===================================================================

class GetSocketResponse::_Internal {
 public:
  static const ::grpc::channelz::v1::Socket& socket(const GetSocketResponse* msg);
};

const ::grpc::channelz::v1::Socket&
GetSocketResponse::_Internal::socket(const GetSocketResponse* msg) {
  return *msg->_impl_.socket_;
}
GetSocketResponse::GetSocketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpc.channelz.v1.GetSocketResponse)
}
GetSocketResponse::GetSocketResponse(const GetSocketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSocketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.socket_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    _this->_impl_.socket_ = new ::grpc::channelz::v1::Socket(*from._impl_.socket_);
  }
  // @@protoc_insertion_point(copy_constructor:grpc.channelz.v1.GetSocketResponse)
}

inline void GetSocketResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.socket_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSocketResponse::~GetSocketResponse() {
  // @@protoc_insertion_point(destructor:grpc.channelz.v1.GetSocketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSocketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.socket_;
}

void GetSocketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.channelz.v1.GetSocketResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.socket_ != nullptr) {
    delete _impl_.socket_;
  }
  _impl_.socket_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSocketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grpc.channelz.v1.Socket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSocketResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.channelz.v1.GetSocketResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.channelz.v1.Socket socket = 1;
  if (this->_internal_has_socket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::socket(this),
        _Internal::socket(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.channelz.v1.GetSocketResponse)
  return target;
}

size_t GetSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.channelz.v1.GetSocketResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.channelz.v1.Socket socket = 1;
  if (this->_internal_has_socket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.socket_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSocketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSocketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSocketResponse::GetClassData() const { return &_class_data_; }


void GetSocketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSocketResponse*>(&to_msg);
  auto& from = static_cast<const GetSocketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.channelz.v1.GetSocketResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_socket()) {
    _this->_internal_mutable_socket()->::grpc::channelz::v1::Socket::MergeFrom(
        from._internal_socket());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSocketResponse::CopyFrom(const GetSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.channelz.v1.GetSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSocketResponse::IsInitialized() const {
  return true;
}

void GetSocketResponse::InternalSwap(GetSocketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.socket_, other->_impl_.socket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSocketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_getter, &descriptor_table_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto_once,
      file_level_metadata_src_2fproto_2fgrpc_2fchannelz_2fchannelz_2eproto[38]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace channelz
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Channel*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Subchannel*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::Subchannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Subchannel >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ChannelConnectivityState*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelConnectivityState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ChannelConnectivityState >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ChannelData*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ChannelData >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ChannelTraceEvent*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelTraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ChannelTraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ChannelTrace*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ChannelTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ChannelRef*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::ChannelRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ChannelRef >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SubchannelRef*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::SubchannelRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SubchannelRef >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketRef*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketRef >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ServerRef*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::ServerRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ServerRef >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Server*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Server >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::ServerData*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::ServerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::ServerData >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Socket*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::Socket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Socket >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketData*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketData >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Address_TcpIpAddress*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address_TcpIpAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Address_TcpIpAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Address_UdsAddress*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address_UdsAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Address_UdsAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Address_OtherAddress*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address_OtherAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Address_OtherAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Address*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Security_Tls*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::Security_Tls >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Security_Tls >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Security_OtherSecurity*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::Security_OtherSecurity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Security_OtherSecurity >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::Security*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::Security >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::Security >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketOption*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketOption >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketOptionTimeout*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOptionTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketOptionTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketOptionLinger*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOptionLinger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketOptionLinger >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::SocketOptionTcpInfo*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::SocketOptionTcpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::SocketOptionTcpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetTopChannelsRequest*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetTopChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetTopChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetTopChannelsResponse*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetTopChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetTopChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServersRequest*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServersResponse*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServerRequest*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServerResponse*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServerSocketsRequest*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServerSocketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServerSocketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetServerSocketsResponse*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetServerSocketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetServerSocketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetChannelRequest*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetChannelResponse*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetSubchannelRequest*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSubchannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetSubchannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetSubchannelResponse*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSubchannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetSubchannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetSocketRequest*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSocketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetSocketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::channelz::v1::GetSocketResponse*
Arena::CreateMaybeMessage< ::grpc::channelz::v1::GetSocketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::channelz::v1::GetSocketResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
